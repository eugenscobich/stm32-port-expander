
stm32-port-expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080084dc  080084dc  000094dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085fc  080085fc  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000000  080085fc  080085fc  0000a06c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085fc  080085fc  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085fc  080085fc  000095fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008604  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000006c  08008670  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08008670  0000a3a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014394  00000000  00000000  0000a095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c6  00000000  00000000  0001e429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000219f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f99  00000000  00000000  00022df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afdc  00000000  00000000  00023d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019174  00000000  00000000  0003ed6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096679  00000000  00000000  00057ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee55a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b80  00000000  00000000  000ee5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f4120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080084c4 	.word	0x080084c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080084c4 	.word	0x080084c4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <MX_ADC1_Init+0x94>)
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <MX_ADC1_Init+0x98>)
 8000950:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_ADC1_Init+0x94>)
 8000954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000958:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_ADC1_Init+0x94>)
 800095c:	2201      	movs	r2, #1
 800095e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_ADC1_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_ADC1_Init+0x94>)
 8000968:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800096c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_ADC1_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_ADC1_Init+0x94>)
 8000976:	2202      	movs	r2, #2
 8000978:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097a:	4815      	ldr	r0, [pc, #84]	@ (80009d0 <MX_ADC1_Init+0x94>)
 800097c:	f001 f952 	bl	8001c24 <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000986:	f000 fdf3 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800098a:	2310      	movs	r3, #16
 800098c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098e:	2301      	movs	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000992:	2306      	movs	r3, #6
 8000994:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_ADC1_Init+0x94>)
 800099c:	f001 fbd2 	bl	8002144 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 fde3 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80009aa:	2311      	movs	r3, #17
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <MX_ADC1_Init+0x94>)
 80009b8:	f001 fbc4 	bl	8002144 <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80009c2:	f000 fdd5 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000088 	.word	0x20000088
 80009d4:	40012400 	.word	0x40012400

080009d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <HAL_ADC_MspInit+0x94>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d13c      	bne.n	8000a64 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <HAL_ADC_MspInit+0x98>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <HAL_ADC_MspInit+0x98>)
 80009f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <HAL_ADC_MspInit+0x98>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a04:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <HAL_ADC_MspInit+0xa0>)
 8000a06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a3a:	f001 ff75 	bl	8002928 <HAL_DMA_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a44:	f000 fd94 	bl	8001570 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a4c:	621a      	str	r2, [r3, #32]
 8000a4e:	4a09      	ldr	r2, [pc, #36]	@ (8000a74 <HAL_ADC_MspInit+0x9c>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2012      	movs	r0, #18
 8000a5a:	f001 ff20 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a5e:	2012      	movs	r0, #18
 8000a60:	f001 ff39 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40012400 	.word	0x40012400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	200000b8 	.word	0x200000b8
 8000a78:	40020008 	.word	0x40020008

08000a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f001 fefd 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa4:	200b      	movs	r0, #11
 8000aa6:	f001 ff16 	bl	80028d6 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a34      	ldr	r2, [pc, #208]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b32      	ldr	r3, [pc, #200]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a2e      	ldr	r2, [pc, #184]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a28      	ldr	r2, [pc, #160]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b26      	ldr	r3, [pc, #152]	@ (8000bbc <MX_GPIO_Init+0x104>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b32:	4823      	ldr	r0, [pc, #140]	@ (8000bc0 <MX_GPIO_Init+0x108>)
 8000b34:	f002 fbc1 	bl	80032ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN1_Pin|PIN2_Pin|PIN3_Pin|PIN4_Pin
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f640 11ff 	movw	r1, #2559	@ 0x9ff
 8000b3e:	4821      	ldr	r0, [pc, #132]	@ (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b40:	f002 fbbb 	bl	80032ba <HAL_GPIO_WritePin>
                          |PIN5_Pin|PIN6_Pin|PIN7_Pin|PIN8_Pin
                          |PIN10_Pin|PIN9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <MX_GPIO_Init+0x108>)
 8000b5e:	f002 f955 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN1_Pin PIN2_Pin PIN3_Pin PIN4_Pin
                           PIN5_Pin PIN6_Pin PIN7_Pin PIN8_Pin
                           PIN10_Pin PIN9_Pin */
  GPIO_InitStruct.Pin = PIN1_Pin|PIN2_Pin|PIN3_Pin|PIN4_Pin
 8000b62:	f640 13ff 	movw	r3, #2559	@ 0x9ff
 8000b66:	613b      	str	r3, [r7, #16]
                          |PIN5_Pin|PIN6_Pin|PIN7_Pin|PIN8_Pin
                          |PIN10_Pin|PIN9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4812      	ldr	r0, [pc, #72]	@ (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b7c:	f002 f946 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN20_Pin PIN22_Pin PIN21_Pin PIN19_Pin
                           PIN18_Pin PIN23_Pin PIN24_Pin PIN25_Pin
                           PIN11_Pin PIN15_Pin PIN14_Pin PIN17_Pin
                           PIN16_Pin */
  GPIO_InitStruct.Pin = PIN20_Pin|PIN22_Pin|PIN21_Pin|PIN19_Pin
 8000b80:	f64f 7337 	movw	r3, #65335	@ 0xff37
 8000b84:	613b      	str	r3, [r7, #16]
                          |PIN18_Pin|PIN23_Pin|PIN24_Pin|PIN25_Pin
                          |PIN11_Pin|PIN15_Pin|PIN14_Pin|PIN17_Pin
                          |PIN16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <MX_GPIO_Init+0x110>)
 8000b96:	f002 f939 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN12_Pin PIN13_Pin */
  GPIO_InitStruct.Pin = PIN12_Pin|PIN13_Pin;
 8000b9a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_GPIO_Init+0x10c>)
 8000bb0:	f002 f92c 	bl	8002e0c <HAL_GPIO_Init>

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bd2:	4a13      	ldr	r2, [pc, #76]	@ (8000c20 <MX_I2C1_Init+0x54>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <MX_I2C1_Init+0x58>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000be4:	2210      	movs	r2, #16
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000c0a:	f002 fb6f 	bl	80032ec <HAL_I2C_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f000 fcac 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000fc 	.word	0x200000fc
 8000c20:	40005400 	.word	0x40005400
 8000c24:	00061a80 	.word	0x00061a80

08000c28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <HAL_I2C_MspInit+0x90>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d133      	bne.n	8000cb0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_I2C_MspInit+0x94>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <HAL_I2C_MspInit+0x94>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_I2C_MspInit+0x94>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c60:	23c0      	movs	r3, #192	@ 0xc0
 8000c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <HAL_I2C_MspInit+0x98>)
 8000c74:	f002 f8ca 	bl	8002e0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_I2C_MspInit+0x94>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <HAL_I2C_MspInit+0x94>)
 8000c7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c82:	61d3      	str	r3, [r2, #28]
 8000c84:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <HAL_I2C_MspInit+0x94>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	201f      	movs	r0, #31
 8000c96:	f001 fe02 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c9a:	201f      	movs	r0, #31
 8000c9c:	f001 fe1b 	bl	80028d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f001 fdfa 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000caa:	2020      	movs	r0, #32
 8000cac:	f001 fe13 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_I2C_MspDeInit+0x44>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d113      	bne.n	8000cfe <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <HAL_I2C_MspDeInit+0x48>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a0c      	ldr	r2, [pc, #48]	@ (8000d0c <HAL_I2C_MspDeInit+0x48>)
 8000cdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ce0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000ce2:	2140      	movs	r1, #64	@ 0x40
 8000ce4:	480a      	ldr	r0, [pc, #40]	@ (8000d10 <HAL_I2C_MspDeInit+0x4c>)
 8000ce6:	f002 fa15 	bl	8003114 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000cea:	2180      	movs	r1, #128	@ 0x80
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <HAL_I2C_MspDeInit+0x4c>)
 8000cee:	f002 fa11 	bl	8003114 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000cf2:	201f      	movs	r0, #31
 8000cf4:	f001 fdfd 	bl	80028f2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000cf8:	2020      	movs	r0, #32
 8000cfa:	f001 fdfa 	bl	80028f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	00000000 	.word	0x00000000

08000d18 <getTemp>:

#define V25 1.57 // from datasheet fo CH32. for STM32 it is 1.43
#define VSENSE 3.3/4096 // VSENSE value 0.0008056640625
#define Avg_Slope 0.0043 // 4.3mV from datasheet

int getTemp(uint32_t variable) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	return (int)(((V25 - (VSENSE * variable)) / Avg_Slope) + 25); // formula from datasheet
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fb57 	bl	80003d4 <__aeabi_ui2d>
 8000d26:	a314      	add	r3, pc, #80	@ (adr r3, 8000d78 <getTemp+0x60>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fbcc 	bl	80004c8 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	a112      	add	r1, pc, #72	@ (adr r1, 8000d80 <getTemp+0x68>)
 8000d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d3a:	f7ff fa0d 	bl	8000158 <__aeabi_dsub>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	a310      	add	r3, pc, #64	@ (adr r3, 8000d88 <getTemp+0x70>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f7ff fce6 	bl	800071c <__aeabi_ddiv>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <getTemp+0x78>)
 8000d5e:	f7ff f9fd 	bl	800015c <__adddf3>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fdbf 	bl	80008ec <__aeabi_d2iz>
 8000d6e:	4603      	mov	r3, r0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	66666666 	.word	0x66666666
 8000d7c:	3f4a6666 	.word	0x3f4a6666
 8000d80:	51eb851f 	.word	0x51eb851f
 8000d84:	3ff91eb8 	.word	0x3ff91eb8
 8000d88:	75f6fd22 	.word	0x75f6fd22
 8000d8c:	3f719ce0 	.word	0x3f719ce0
 8000d90:	40390000 	.word	0x40390000
 8000d94:	00000000 	.word	0x00000000

08000d98 <getVoltage>:

int getVoltage(uint32_t variable) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	return (int)(VSENSE * variable); // formula from datasheet
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fb17 	bl	80003d4 <__aeabi_ui2d>
 8000da6:	a308      	add	r3, pc, #32	@ (adr r3, 8000dc8 <getVoltage+0x30>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fb8c 	bl	80004c8 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff fd98 	bl	80008ec <__aeabi_d2iz>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	66666666 	.word	0x66666666
 8000dcc:	3f4a6666 	.word	0x3f4a6666

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fec3 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 fa53 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f7ff fe6b 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de2:	f7ff fe4b 	bl	8000a7c <MX_DMA_Init>
  MX_I2C1_Init();
 8000de6:	f7ff fef1 	bl	8000bcc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dea:	f000 fe1d 	bl	8001a28 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000dee:	f7ff fda5 	bl	800093c <MX_ADC1_Init>
  MX_RTC_Init();
 8000df2:	f000 fbc9 	bl	8001588 <MX_RTC_Init>
  MX_TIM2_Init();
 8000df6:	f000 fd4f 	bl	8001898 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000dfa:	4876      	ldr	r0, [pc, #472]	@ (8000fd4 <main+0x204>)
 8000dfc:	f001 fb9c 	bl	8002538 <HAL_ADCEx_Calibration_Start>
  HAL_I2C_EnableListen_IT(&hi2c1);
 8000e00:	4875      	ldr	r0, [pc, #468]	@ (8000fd8 <main+0x208>)
 8000e02:	f002 fcde 	bl	80037c2 <HAL_I2C_EnableListen_IT>
  HAL_ADC_Start_DMA(&hadc1, adcDmaValue, 2);
 8000e06:	2202      	movs	r2, #2
 8000e08:	4974      	ldr	r1, [pc, #464]	@ (8000fdc <main+0x20c>)
 8000e0a:	4872      	ldr	r0, [pc, #456]	@ (8000fd4 <main+0x204>)
 8000e0c:	f000 ffe2 	bl	8001dd4 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOC, 13, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	210d      	movs	r1, #13
 8000e14:	4872      	ldr	r0, [pc, #456]	@ (8000fe0 <main+0x210>)
 8000e16:	f002 fa50 	bl	80032ba <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e1a:	4872      	ldr	r0, [pc, #456]	@ (8000fe4 <main+0x214>)
 8000e1c:	f005 fb18 	bl	8006450 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000e20:	2104      	movs	r1, #4
 8000e22:	4870      	ldr	r0, [pc, #448]	@ (8000fe4 <main+0x214>)
 8000e24:	f005 fbbe 	bl	80065a4 <HAL_TIM_IC_Start_IT>

  printf("Stm 32 Port Expander by Eugen Scobich\r\n");
 8000e28:	486f      	ldr	r0, [pc, #444]	@ (8000fe8 <main+0x218>)
 8000e2a:	f006 fce1 	bl	80077f0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		#if DEBUG
			uint32_t currentTick = HAL_GetTick();
 8000e2e:	f000 feef 	bl	8001c10 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]
		#endif

		uint32_t timerCurrentCounter = TIM2->CNT;
 8000e34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3a:	60fb      	str	r3, [r7, #12]
		uint32_t delta = (timerCurrentCounter + 10000 * timerOverloadedCount) - timerCapturedCounter;
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	@ (8000fec <main+0x21c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	441a      	add	r2, r3
 8000e50:	4b67      	ldr	r3, [pc, #412]	@ (8000ff0 <main+0x220>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	60bb      	str	r3, [r7, #8]
		if (delta > DIMMER_RESET_TRESHHOLD || getTemp(adcTempValue) > temperatureThreshold) {
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	f242 6248 	movw	r2, #9800	@ 0x2648
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d809      	bhi.n	8000e76 <main+0xa6>
 8000e62:	4b64      	ldr	r3, [pc, #400]	@ (8000ff4 <main+0x224>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff56 	bl	8000d18 <getTemp>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a62      	ldr	r2, [pc, #392]	@ (8000ff8 <main+0x228>)
 8000e70:	7812      	ldrb	r2, [r2, #0]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dd03      	ble.n	8000e7e <main+0xae>
			GPIOA->BSRR = DIMMER_PINS_RESET;
 8000e76:	4b61      	ldr	r3, [pc, #388]	@ (8000ffc <main+0x22c>)
 8000e78:	4a61      	ldr	r2, [pc, #388]	@ (8001000 <main+0x230>)
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	e06f      	b.n	8000f5e <main+0x18e>
		} else {
			if (dimmerValue[0] < delta) {
 8000e7e:	4b61      	ldr	r3, [pc, #388]	@ (8001004 <main+0x234>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d904      	bls.n	8000e94 <main+0xc4>
				HAL_GPIO_WritePin(PIN1_GPIO_Port, PIN1_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	485b      	ldr	r0, [pc, #364]	@ (8000ffc <main+0x22c>)
 8000e90:	f002 fa13 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[1] < delta) {
 8000e94:	4b5b      	ldr	r3, [pc, #364]	@ (8001004 <main+0x234>)
 8000e96:	885b      	ldrh	r3, [r3, #2]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d904      	bls.n	8000eaa <main+0xda>
				HAL_GPIO_WritePin(PIN2_GPIO_Port, PIN2_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4855      	ldr	r0, [pc, #340]	@ (8000ffc <main+0x22c>)
 8000ea6:	f002 fa08 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[2] < delta) {
 8000eaa:	4b56      	ldr	r3, [pc, #344]	@ (8001004 <main+0x234>)
 8000eac:	889b      	ldrh	r3, [r3, #4]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d904      	bls.n	8000ec0 <main+0xf0>
				HAL_GPIO_WritePin(PIN3_GPIO_Port, PIN3_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4850      	ldr	r0, [pc, #320]	@ (8000ffc <main+0x22c>)
 8000ebc:	f002 f9fd 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[3] < delta) {
 8000ec0:	4b50      	ldr	r3, [pc, #320]	@ (8001004 <main+0x234>)
 8000ec2:	88db      	ldrh	r3, [r3, #6]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d904      	bls.n	8000ed6 <main+0x106>
				HAL_GPIO_WritePin(PIN4_GPIO_Port, PIN4_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2108      	movs	r1, #8
 8000ed0:	484a      	ldr	r0, [pc, #296]	@ (8000ffc <main+0x22c>)
 8000ed2:	f002 f9f2 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[4] < delta) {
 8000ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8001004 <main+0x234>)
 8000ed8:	891b      	ldrh	r3, [r3, #8]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d904      	bls.n	8000eec <main+0x11c>
				HAL_GPIO_WritePin(PIN5_GPIO_Port, PIN5_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4845      	ldr	r0, [pc, #276]	@ (8000ffc <main+0x22c>)
 8000ee8:	f002 f9e7 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[5] < delta) {
 8000eec:	4b45      	ldr	r3, [pc, #276]	@ (8001004 <main+0x234>)
 8000eee:	895b      	ldrh	r3, [r3, #10]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d904      	bls.n	8000f02 <main+0x132>
				HAL_GPIO_WritePin(PIN6_GPIO_Port, PIN6_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2120      	movs	r1, #32
 8000efc:	483f      	ldr	r0, [pc, #252]	@ (8000ffc <main+0x22c>)
 8000efe:	f002 f9dc 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[6] < delta) {
 8000f02:	4b40      	ldr	r3, [pc, #256]	@ (8001004 <main+0x234>)
 8000f04:	899b      	ldrh	r3, [r3, #12]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d904      	bls.n	8000f18 <main+0x148>
				HAL_GPIO_WritePin(PIN7_GPIO_Port, PIN7_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	@ 0x40
 8000f12:	483a      	ldr	r0, [pc, #232]	@ (8000ffc <main+0x22c>)
 8000f14:	f002 f9d1 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[7] < delta) {
 8000f18:	4b3a      	ldr	r3, [pc, #232]	@ (8001004 <main+0x234>)
 8000f1a:	89db      	ldrh	r3, [r3, #14]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d904      	bls.n	8000f2e <main+0x15e>
				HAL_GPIO_WritePin(PIN8_GPIO_Port, PIN8_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	4834      	ldr	r0, [pc, #208]	@ (8000ffc <main+0x22c>)
 8000f2a:	f002 f9c6 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[8] < delta) {
 8000f2e:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <main+0x234>)
 8000f30:	8a1b      	ldrh	r3, [r3, #16]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d905      	bls.n	8000f46 <main+0x176>
				HAL_GPIO_WritePin(PIN9_GPIO_Port, PIN9_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f40:	482e      	ldr	r0, [pc, #184]	@ (8000ffc <main+0x22c>)
 8000f42:	f002 f9ba 	bl	80032ba <HAL_GPIO_WritePin>
			}
			if (dimmerValue[9] < delta) {
 8000f46:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <main+0x234>)
 8000f48:	8a5b      	ldrh	r3, [r3, #18]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d905      	bls.n	8000f5e <main+0x18e>
				HAL_GPIO_WritePin(PIN10_GPIO_Port, PIN10_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f58:	4828      	ldr	r0, [pc, #160]	@ (8000ffc <main+0x22c>)
 8000f5a:	f002 f9ae 	bl	80032ba <HAL_GPIO_WritePin>
			}
		}

		for (uint8_t i = 0; i < 10; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
 8000f62:	e021      	b.n	8000fa8 <main+0x1d8>
			dimmerValue[i] = (100 - 100 * output_analog_values[i]/255) * 100;
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	4a28      	ldr	r2, [pc, #160]	@ (8001008 <main+0x238>)
 8000f68:	5cd3      	ldrb	r3, [r2, r3]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2364      	movs	r3, #100	@ 0x64
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	4a25      	ldr	r2, [pc, #148]	@ (800100c <main+0x23c>)
 8000f76:	fb82 1203 	smull	r1, r2, r2, r3
 8000f7a:	441a      	add	r2, r3
 8000f7c:	11d2      	asrs	r2, r2, #7
 8000f7e:	17db      	asrs	r3, r3, #31
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	3364      	adds	r3, #100	@ 0x64
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	0089      	lsls	r1, r1, #2
 8000f8c:	440a      	add	r2, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	0088      	lsls	r0, r1, #2
 8000f92:	4611      	mov	r1, r2
 8000f94:	4602      	mov	r2, r0
 8000f96:	440a      	add	r2, r1
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	b291      	uxth	r1, r2
 8000f9c:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <main+0x234>)
 8000f9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 10; i++) {
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	75fb      	strb	r3, [r7, #23]
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	d9da      	bls.n	8000f64 <main+0x194>
		}
		temperatureThreshold = output_analog_values[10];
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <main+0x238>)
 8000fb0:	7a9b      	ldrb	r3, [r3, #10]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <main+0x228>)
 8000fb6:	701a      	strb	r2, [r3, #0]

		if ((output_digital_values[0] & (1 << 0)) > 0) {
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <main+0x240>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dd26      	ble.n	8001014 <main+0x244>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <main+0x210>)
 8000fce:	f002 f974 	bl	80032ba <HAL_GPIO_WritePin>
 8000fd2:	e025      	b.n	8001020 <main+0x250>
 8000fd4:	20000088 	.word	0x20000088
 8000fd8:	200000fc 	.word	0x200000fc
 8000fdc:	20000180 	.word	0x20000180
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	200001c8 	.word	0x200001c8
 8000fe8:	080084dc 	.word	0x080084dc
 8000fec:	20000194 	.word	0x20000194
 8000ff0:	20000198 	.word	0x20000198
 8000ff4:	20000188 	.word	0x20000188
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	09ff0000 	.word	0x09ff0000
 8001004:	2000019c 	.word	0x2000019c
 8001008:	20000170 	.word	0x20000170
 800100c:	80808081 	.word	0x80808081
 8001010:	2000015c 	.word	0x2000015c
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	488e      	ldr	r0, [pc, #568]	@ (8001254 <main+0x484>)
 800101c:	f002 f94d 	bl	80032ba <HAL_GPIO_WritePin>
		}

		input_analog_values[0] = getVoltage(adcVRefValue);
 8001020:	4b8d      	ldr	r3, [pc, #564]	@ (8001258 <main+0x488>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff feb7 	bl	8000d98 <getVoltage>
 800102a:	4603      	mov	r3, r0
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b8b      	ldr	r3, [pc, #556]	@ (800125c <main+0x48c>)
 8001030:	701a      	strb	r2, [r3, #0]
		input_analog_values[1] = getTemp(adcTempValue);
 8001032:	4b8b      	ldr	r3, [pc, #556]	@ (8001260 <main+0x490>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe6e 	bl	8000d18 <getTemp>
 800103c:	4603      	mov	r3, r0
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b86      	ldr	r3, [pc, #536]	@ (800125c <main+0x48c>)
 8001042:	705a      	strb	r2, [r3, #1]
        uint8_t input_digital_values_temp[2] = {0x00};
 8001044:	2300      	movs	r3, #0
 8001046:	80bb      	strh	r3, [r7, #4]

		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN11_GPIO_Port, PIN11_Pin) << 0;
 8001048:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800104c:	4885      	ldr	r0, [pc, #532]	@ (8001264 <main+0x494>)
 800104e:	f002 f91d 	bl	800328c <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	b25a      	sxtb	r2, r3
 800105a:	b24b      	sxtb	r3, r1
 800105c:	4313      	orrs	r3, r2
 800105e:	b25b      	sxtb	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	713b      	strb	r3, [r7, #4]
		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN12_GPIO_Port, PIN12_Pin) << 1;
 8001064:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001068:	487f      	ldr	r0, [pc, #508]	@ (8001268 <main+0x498>)
 800106a:	f002 f90f 	bl	800328c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	793a      	ldrb	r2, [r7, #4]
 8001074:	b252      	sxtb	r2, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b25b      	sxtb	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	713b      	strb	r3, [r7, #4]
		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN13_GPIO_Port, PIN13_Pin) << 2;
 8001080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001084:	4878      	ldr	r0, [pc, #480]	@ (8001268 <main+0x498>)
 8001086:	f002 f901 	bl	800328c <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	793a      	ldrb	r2, [r7, #4]
 8001090:	b252      	sxtb	r2, r2
 8001092:	b25b      	sxtb	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b25b      	sxtb	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	713b      	strb	r3, [r7, #4]
		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN14_GPIO_Port, PIN14_Pin) << 3;
 800109c:	2120      	movs	r1, #32
 800109e:	4871      	ldr	r0, [pc, #452]	@ (8001264 <main+0x494>)
 80010a0:	f002 f8f4 	bl	800328c <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	793a      	ldrb	r2, [r7, #4]
 80010aa:	b252      	sxtb	r2, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	713b      	strb	r3, [r7, #4]
		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN15_GPIO_Port, PIN15_Pin) << 4;
 80010b6:	2110      	movs	r1, #16
 80010b8:	486a      	ldr	r0, [pc, #424]	@ (8001264 <main+0x494>)
 80010ba:	f002 f8e7 	bl	800328c <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	793a      	ldrb	r2, [r7, #4]
 80010c4:	b252      	sxtb	r2, r2
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	713b      	strb	r3, [r7, #4]
		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN16_GPIO_Port, PIN16_Pin) << 5;
 80010d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d4:	4863      	ldr	r0, [pc, #396]	@ (8001264 <main+0x494>)
 80010d6:	f002 f8d9 	bl	800328c <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	015b      	lsls	r3, r3, #5
 80010de:	793a      	ldrb	r2, [r7, #4]
 80010e0:	b252      	sxtb	r2, r2
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	713b      	strb	r3, [r7, #4]
		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN17_GPIO_Port, PIN17_Pin) << 6;
 80010ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f0:	485c      	ldr	r0, [pc, #368]	@ (8001264 <main+0x494>)
 80010f2:	f002 f8cb 	bl	800328c <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	793a      	ldrb	r2, [r7, #4]
 80010fc:	b252      	sxtb	r2, r2
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	713b      	strb	r3, [r7, #4]
		input_digital_values_temp[0] |= HAL_GPIO_ReadPin(PIN18_GPIO_Port, PIN18_Pin) << 7;
 8001108:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800110c:	4855      	ldr	r0, [pc, #340]	@ (8001264 <main+0x494>)
 800110e:	f002 f8bd 	bl	800328c <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	01db      	lsls	r3, r3, #7
 8001116:	793a      	ldrb	r2, [r7, #4]
 8001118:	b252      	sxtb	r2, r2
 800111a:	b25b      	sxtb	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b25b      	sxtb	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	713b      	strb	r3, [r7, #4]

		input_digital_values_temp[1] |= HAL_GPIO_ReadPin(PIN19_GPIO_Port, PIN19_Pin) << 0;
 8001124:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001128:	484e      	ldr	r0, [pc, #312]	@ (8001264 <main+0x494>)
 800112a:	f002 f8af 	bl	800328c <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	4619      	mov	r1, r3
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	b25a      	sxtb	r2, r3
 8001136:	b24b      	sxtb	r3, r1
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	717b      	strb	r3, [r7, #5]
		input_digital_values_temp[1] |= HAL_GPIO_ReadPin(PIN20_GPIO_Port, PIN20_Pin) << 1;
 8001140:	2101      	movs	r1, #1
 8001142:	4848      	ldr	r0, [pc, #288]	@ (8001264 <main+0x494>)
 8001144:	f002 f8a2 	bl	800328c <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	797a      	ldrb	r2, [r7, #5]
 800114e:	b252      	sxtb	r2, r2
 8001150:	b25b      	sxtb	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b25b      	sxtb	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	717b      	strb	r3, [r7, #5]
		input_digital_values_temp[1] |= HAL_GPIO_ReadPin(PIN21_GPIO_Port, PIN21_Pin) << 2;
 800115a:	2104      	movs	r1, #4
 800115c:	4841      	ldr	r0, [pc, #260]	@ (8001264 <main+0x494>)
 800115e:	f002 f895 	bl	800328c <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	797a      	ldrb	r2, [r7, #5]
 8001168:	b252      	sxtb	r2, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	717b      	strb	r3, [r7, #5]
		input_digital_values_temp[1] |= HAL_GPIO_ReadPin(PIN22_GPIO_Port, PIN22_Pin) << 3;
 8001174:	2102      	movs	r1, #2
 8001176:	483b      	ldr	r0, [pc, #236]	@ (8001264 <main+0x494>)
 8001178:	f002 f888 	bl	800328c <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	797a      	ldrb	r2, [r7, #5]
 8001182:	b252      	sxtb	r2, r2
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	717b      	strb	r3, [r7, #5]
		input_digital_values_temp[1] |= HAL_GPIO_ReadPin(PIN23_GPIO_Port, PIN23_Pin) << 4;
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	4834      	ldr	r0, [pc, #208]	@ (8001264 <main+0x494>)
 8001194:	f002 f87a 	bl	800328c <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	797a      	ldrb	r2, [r7, #5]
 800119e:	b252      	sxtb	r2, r2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	717b      	strb	r3, [r7, #5]
		input_digital_values_temp[1] |= HAL_GPIO_ReadPin(PIN24_GPIO_Port, PIN24_Pin) << 5;
 80011aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ae:	482d      	ldr	r0, [pc, #180]	@ (8001264 <main+0x494>)
 80011b0:	f002 f86c 	bl	800328c <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	797a      	ldrb	r2, [r7, #5]
 80011ba:	b252      	sxtb	r2, r2
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	717b      	strb	r3, [r7, #5]
		input_digital_values_temp[1] |= HAL_GPIO_ReadPin(PIN25_GPIO_Port, PIN25_Pin) << 6;
 80011c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ca:	4826      	ldr	r0, [pc, #152]	@ (8001264 <main+0x494>)
 80011cc:	f002 f85e 	bl	800328c <HAL_GPIO_ReadPin>
 80011d0:	4603      	mov	r3, r0
 80011d2:	019b      	lsls	r3, r3, #6
 80011d4:	797a      	ldrb	r2, [r7, #5]
 80011d6:	b252      	sxtb	r2, r2
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	717b      	strb	r3, [r7, #5]

		input_digital_values[0] = input_digital_values_temp[0];
 80011e2:	793a      	ldrb	r2, [r7, #4]
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <main+0x49c>)
 80011e6:	701a      	strb	r2, [r3, #0]
		input_digital_values[1] = input_digital_values_temp[1];
 80011e8:	797a      	ldrb	r2, [r7, #5]
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <main+0x49c>)
 80011ec:	705a      	strb	r2, [r3, #1]

		#if DEBUG
			if (previousTick + 1000 < currentTick) {
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <main+0x4a0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f67f ae18 	bls.w	8000e2e <main+0x5e>
				printf("ADC1:[%d], TEMP:[%d], VREF:[%d], V:[%d]\r\n", adcTempValue, input_analog_values[1], adcVRefValue, input_analog_values[0]);
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <main+0x490>)
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <main+0x48c>)
 8001204:	785b      	ldrb	r3, [r3, #1]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <main+0x488>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a13      	ldr	r2, [pc, #76]	@ (800125c <main+0x48c>)
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	4602      	mov	r2, r0
 8001218:	4816      	ldr	r0, [pc, #88]	@ (8001274 <main+0x4a4>)
 800121a:	f006 fa81 	bl	8007720 <iprintf>
				printf("Input Value 1=[%d], 2=[%d]\r\n", input_digital_values[0], input_digital_values[1]);
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <main+0x49c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <main+0x49c>)
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4812      	ldr	r0, [pc, #72]	@ (8001278 <main+0x4a8>)
 8001230:	f006 fa76 	bl	8007720 <iprintf>
				printf("Output Analog Value 1=[%d], 2=[%d]\r\n", output_analog_values[0], output_analog_values[1]);
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <main+0x4ac>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <main+0x4ac>)
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	480e      	ldr	r0, [pc, #56]	@ (8001280 <main+0x4b0>)
 8001246:	f006 fa6b 	bl	8007720 <iprintf>
				previousTick = currentTick;
 800124a:	4a09      	ldr	r2, [pc, #36]	@ (8001270 <main+0x4a0>)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	6013      	str	r3, [r2, #0]
	while (1) {
 8001250:	e5ed      	b.n	8000e2e <main+0x5e>
 8001252:	bf00      	nop
 8001254:	40011000 	.word	0x40011000
 8001258:	2000018c 	.word	0x2000018c
 800125c:	20000160 	.word	0x20000160
 8001260:	20000188 	.word	0x20000188
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40010800 	.word	0x40010800
 800126c:	20000158 	.word	0x20000158
 8001270:	20000190 	.word	0x20000190
 8001274:	08008504 	.word	0x08008504
 8001278:	08008530 	.word	0x08008530
 800127c:	20000170 	.word	0x20000170
 8001280:	08008550 	.word	0x08008550

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	@ 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800128e:	2228      	movs	r2, #40	@ 0x28
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f006 fab4 	bl	8007800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012b4:	2309      	movs	r3, #9
 80012b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c2:	2301      	movs	r3, #1
 80012c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012c6:	2301      	movs	r3, #1
 80012c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 ff66 	bl	80051b0 <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012ea:	f000 f941 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f004 f9d2 	bl	80056b4 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001316:	f000 f92b 	bl	8001570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800131a:	2303      	movs	r3, #3
 800131c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800131e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001322:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001328:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fb4f 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001338:	f000 f91a 	bl	8001570 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	@ 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800134c:	1d39      	adds	r1, r7, #4
 800134e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001352:	2201      	movs	r2, #1
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <__io_putchar+0x20>)
 8001356:	f005 ffa1 	bl	800729c <HAL_UART_Transmit>
	return ch;
 800135a:	687b      	ldr	r3, [r7, #4]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000210 	.word	0x20000210

08001368 <_write>:

int _write(int file, char *ptr, int len) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e009      	b.n	800138e <_write+0x26>
		__io_putchar(*ptr++);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ffde 	bl	8001344 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf1      	blt.n	800137a <_write+0x12>
	}
	return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_I2C_ListenCpltCallback>:

extern void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f002 fa0a 	bl	80037c2 <HAL_I2C_EnableListen_IT>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_I2C_AddrCallback>:


extern void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
 80013c4:	4613      	mov	r3, r2
 80013c6:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) { // if the master wants to transmit the data
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d106      	bne.n	80013dc <HAL_I2C_AddrCallback+0x24>
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, rx_buf, 2, I2C_LAST_FRAME);
 80013ce:	2320      	movs	r3, #32
 80013d0:	2202      	movs	r2, #2
 80013d2:	492f      	ldr	r1, [pc, #188]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f002 f982 	bl	80036de <HAL_I2C_Slave_Seq_Receive_IT>
			tx_buf[0] = input_digital_values[1];
		}
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, tx_buf, 1, I2C_LAST_FRAME);
	}

}
 80013da:	e055      	b.n	8001488 <HAL_I2C_AddrCallback+0xd0>
		if (rx_buf[0] == WRITE_DIGITAL_OUTPUT_VALUE_1_CMD) {
 80013dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b22      	cmp	r3, #34	@ 0x22
 80013e2:	d107      	bne.n	80013f4 <HAL_I2C_AddrCallback+0x3c>
			output_digital_values[0] = rx_buf[1];
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 80013e6:	785a      	ldrb	r2, [r3, #1]
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <HAL_I2C_AddrCallback+0xdc>)
 80013ea:	701a      	strb	r2, [r3, #0]
			tx_buf[0] = ACK_VALUE;
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <HAL_I2C_AddrCallback+0xe0>)
 80013ee:	2282      	movs	r2, #130	@ 0x82
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	e043      	b.n	800147c <HAL_I2C_AddrCallback+0xc4>
		} else if (rx_buf[0] == WRITE_DIGITAL_OUTPUT_VALUE_2_CMD){
 80013f4:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b23      	cmp	r3, #35	@ 0x23
 80013fa:	d107      	bne.n	800140c <HAL_I2C_AddrCallback+0x54>
			output_digital_values[1] = rx_buf[1];
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 80013fe:	785a      	ldrb	r2, [r3, #1]
 8001400:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <HAL_I2C_AddrCallback+0xdc>)
 8001402:	705a      	strb	r2, [r3, #1]
			tx_buf[0] = ACK_VALUE;
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <HAL_I2C_AddrCallback+0xe0>)
 8001406:	2282      	movs	r2, #130	@ 0x82
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	e037      	b.n	800147c <HAL_I2C_AddrCallback+0xc4>
		} else if (rx_buf[0] >= WRITE_ANALOG_OUTPUT_VALUES_CMD && rx_buf[0] <= WRITE_ANALOG_OUTPUT_VALUES_CMD + 15) {
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d913      	bls.n	800143c <HAL_I2C_AddrCallback+0x84>
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b1f      	cmp	r3, #31
 800141a:	d80f      	bhi.n	800143c <HAL_I2C_AddrCallback+0x84>
			output_analog_values[rx_buf[0] - WRITE_ANALOG_OUTPUT_VALUES_CMD] = rx_buf[1];
 800141c:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	3b10      	subs	r3, #16
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 8001424:	7851      	ldrb	r1, [r2, #1]
 8001426:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_I2C_AddrCallback+0xe4>)
 8001428:	54d1      	strb	r1, [r2, r3]
			tx_buf[0] = output_analog_values[rx_buf[0] - WRITE_ANALOG_OUTPUT_VALUES_CMD];
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3b10      	subs	r3, #16
 8001430:	4a1a      	ldr	r2, [pc, #104]	@ (800149c <HAL_I2C_AddrCallback+0xe4>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_I2C_AddrCallback+0xe0>)
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e01f      	b.n	800147c <HAL_I2C_AddrCallback+0xc4>
		} else if (rx_buf[0] >= READ_ANALOG_INPUT_VALUES_CMD && rx_buf[0] <= READ_ANALOG_INPUT_VALUES_CMD + 15) {
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d808      	bhi.n	8001456 <HAL_I2C_AddrCallback+0x9e>
			tx_buf[0] = input_analog_values[rx_buf[0]];
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_I2C_AddrCallback+0xe8>)
 800144c:	5c9b      	ldrb	r3, [r3, r2]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_I2C_AddrCallback+0xe0>)
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e012      	b.n	800147c <HAL_I2C_AddrCallback+0xc4>
		} else if (rx_buf[0] == READ_DIGITAL_INPUT_VALUE_1_CMD) {
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b20      	cmp	r3, #32
 800145c:	d105      	bne.n	800146a <HAL_I2C_AddrCallback+0xb2>
			tx_buf[0] = input_digital_values[0];
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_I2C_AddrCallback+0xec>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_I2C_AddrCallback+0xe0>)
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e008      	b.n	800147c <HAL_I2C_AddrCallback+0xc4>
		} else if (rx_buf[0] == READ_DIGITAL_INPUT_VALUE_2_CMD) {
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_I2C_AddrCallback+0xd8>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b21      	cmp	r3, #33	@ 0x21
 8001470:	d104      	bne.n	800147c <HAL_I2C_AddrCallback+0xc4>
			tx_buf[0] = input_digital_values[1];
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <HAL_I2C_AddrCallback+0xec>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <HAL_I2C_AddrCallback+0xe0>)
 800147a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, tx_buf, 1, I2C_LAST_FRAME);
 800147c:	2320      	movs	r3, #32
 800147e:	2201      	movs	r2, #1
 8001480:	4905      	ldr	r1, [pc, #20]	@ (8001498 <HAL_I2C_AddrCallback+0xe0>)
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f002 f8b9 	bl	80035fa <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000150 	.word	0x20000150
 8001494:	2000015c 	.word	0x2000015c
 8001498:	20000154 	.word	0x20000154
 800149c:	20000170 	.word	0x20000170
 80014a0:	20000160 	.word	0x20000160
 80014a4:	20000158 	.word	0x20000158

080014a8 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]

}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	HAL_I2C_DeInit(&hi2c1); // When master is reset we need to reinit i2c
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <HAL_I2C_ErrorCallback+0x20>)
 80014d6:	f002 f84d 	bl	8003574 <HAL_I2C_DeInit>
	MX_I2C1_Init();
 80014da:	f7ff fb77 	bl	8000bcc <MX_I2C1_Init>
	HAL_I2C_EnableListen_IT(hi2c);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f002 f96f 	bl	80037c2 <HAL_I2C_EnableListen_IT>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000fc 	.word	0x200000fc

080014f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	adcTempValue = adcDmaValue[0];
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_ADC_ConvCpltCallback+0x24>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <HAL_ADC_ConvCpltCallback+0x28>)
 80014fe:	6013      	str	r3, [r2, #0]
	adcVRefValue = adcDmaValue[1];
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <HAL_ADC_ConvCpltCallback+0x24>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a05      	ldr	r2, [pc, #20]	@ (800151c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000180 	.word	0x20000180
 8001518:	20000188 	.word	0x20000188
 800151c:	2000018c 	.word	0x2000018c

08001520 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	timerCapturedCounter = TIM2->CCR2;
 8001528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800152c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <HAL_TIM_IC_CaptureCallback+0x24>)
 8001530:	6013      	str	r3, [r2, #0]
    timerOverloadedCount = 0;
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000198 	.word	0x20000198
 8001548:	20000194 	.word	0x20000194

0800154c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	timerOverloadedCount++;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155e:	701a      	strb	r2, [r3, #0]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000194 	.word	0x20000194

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("FATAL ERROR!!!");
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <Error_Handler+0x14>)
 8001576:	f006 f8d3 	bl	8007720 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157a:	b672      	cpsid	i
}
 800157c:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <Error_Handler+0xe>
 8001582:	bf00      	nop
 8001584:	08008578 	.word	0x08008578

08001588 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2100      	movs	r1, #0
 8001592:	460a      	mov	r2, r1
 8001594:	801a      	strh	r2, [r3, #0]
 8001596:	460a      	mov	r2, r1
 8001598:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800159e:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_RTC_Init+0x8c>)
 80015a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001618 <MX_RTC_Init+0x90>)
 80015a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <MX_RTC_Init+0x8c>)
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_RTC_Init+0x8c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b2:	4818      	ldr	r0, [pc, #96]	@ (8001614 <MX_RTC_Init+0x8c>)
 80015b4:	f004 fb78 	bl	8005ca8 <HAL_RTC_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80015be:	f7ff ffd7 	bl	8001570 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2201      	movs	r2, #1
 80015d2:	4619      	mov	r1, r3
 80015d4:	480f      	ldr	r0, [pc, #60]	@ (8001614 <MX_RTC_Init+0x8c>)
 80015d6:	f004 fbf3 	bl	8005dc0 <HAL_RTC_SetTime>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80015e0:	f7ff ffc6 	bl	8001570 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015e4:	2301      	movs	r3, #1
 80015e6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80015e8:	2301      	movs	r3, #1
 80015ea:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	@ (8001614 <MX_RTC_Init+0x8c>)
 80015fc:	f004 fc78 	bl	8005ef0 <HAL_RTC_SetDate>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001606:	f7ff ffb3 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200001b0 	.word	0x200001b0
 8001618:	40002800 	.word	0x40002800

0800161c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <HAL_RTC_MspInit+0x3c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d110      	bne.n	8001650 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800162e:	f003 fdb3 	bl	8005198 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_RTC_MspInit+0x40>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <HAL_RTC_MspInit+0x40>)
 8001638:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <HAL_RTC_MspInit+0x40>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_RTC_MspInit+0x44>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40002800 	.word	0x40002800
 800165c:	40021000 	.word	0x40021000
 8001660:	4242043c 	.word	0x4242043c

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_MspInit+0x5c>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_MspInit+0x60>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_MspInit+0x60>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <NMI_Handler+0x4>

080016d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <MemManage_Handler+0x4>

080016e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <UsageFault_Handler+0x4>

080016f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 fa68 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <DMA1_Channel1_IRQHandler+0x10>)
 8001726:	f001 fa31 	bl	8002b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000b8 	.word	0x200000b8

08001734 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <ADC1_2_IRQHandler+0x10>)
 800173a:	f000 fc29 	bl	8001f90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000088 	.word	0x20000088

08001748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <TIM2_IRQHandler+0x10>)
 800174e:	f005 f835 	bl	80067bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001c8 	.word	0x200001c8

0800175c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <I2C1_EV_IRQHandler+0x10>)
 8001762:	f002 f863 	bl	800382c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000fc 	.word	0x200000fc

08001770 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <I2C1_ER_IRQHandler+0x10>)
 8001776:	f002 f9ca 	bl	8003b0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000fc 	.word	0x200000fc

08001784 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
  }

  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_close>:
  }
  return len;
}

int _close(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e4:	605a      	str	r2, [r3, #4]
  return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <_isatty>:

int _isatty(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
	...

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f005 ffde 	bl	8007810 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20005000 	.word	0x20005000
 8001880:	00000400 	.word	0x00000400
 8001884:	200001c4 	.word	0x200001c4
 8001888:	200003a8 	.word	0x200003a8

0800188c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0318 	add.w	r3, r7, #24
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <MX_TIM2_Init+0xdc>)
 80018c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80018ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <MX_TIM2_Init+0xdc>)
 80018cc:	2247      	movs	r2, #71	@ 0x47
 80018ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <MX_TIM2_Init+0xdc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80018d6:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <MX_TIM2_Init+0xdc>)
 80018d8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <MX_TIM2_Init+0xdc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <MX_TIM2_Init+0xdc>)
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ea:	4822      	ldr	r0, [pc, #136]	@ (8001974 <MX_TIM2_Init+0xdc>)
 80018ec:	f004 fd60 	bl	80063b0 <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80018f6:	f7ff fe3b 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4619      	mov	r1, r3
 8001906:	481b      	ldr	r0, [pc, #108]	@ (8001974 <MX_TIM2_Init+0xdc>)
 8001908:	f005 f8fc 	bl	8006b04 <HAL_TIM_ConfigClockSource>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001912:	f7ff fe2d 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001916:	4817      	ldr	r0, [pc, #92]	@ (8001974 <MX_TIM2_Init+0xdc>)
 8001918:	f004 fdec 	bl	80064f4 <HAL_TIM_IC_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001922:	f7ff fe25 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	4619      	mov	r1, r3
 8001934:	480f      	ldr	r0, [pc, #60]	@ (8001974 <MX_TIM2_Init+0xdc>)
 8001936:	f005 fbf1 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001940:	f7ff fe16 	bl	8001570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001944:	2302      	movs	r3, #2
 8001946:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001948:	2301      	movs	r3, #1
 800194a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	2204      	movs	r2, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	@ (8001974 <MX_TIM2_Init+0xdc>)
 800195c:	f005 f836 	bl	80069cc <HAL_TIM_IC_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001966:	f7ff fe03 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	@ 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200001c8 	.word	0x200001c8

08001978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001996:	d13d      	bne.n	8001a14 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <HAL_TIM_Base_MspInit+0xa4>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a1c <HAL_TIM_Base_MspInit+0xa4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	61d3      	str	r3, [r2, #28]
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_TIM_Base_MspInit+0xa4>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <HAL_TIM_Base_MspInit+0xa4>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_TIM_Base_MspInit+0xa4>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <HAL_TIM_Base_MspInit+0xa4>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c8:	2308      	movs	r3, #8
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4811      	ldr	r0, [pc, #68]	@ (8001a20 <HAL_TIM_Base_MspInit+0xa8>)
 80019dc:	f001 fa16 	bl	8002e0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80019e0:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <HAL_TIM_Base_MspInit+0xac>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fe:	4a09      	ldr	r2, [pc, #36]	@ (8001a24 <HAL_TIM_Base_MspInit+0xac>)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	201c      	movs	r0, #28
 8001a0a:	f000 ff48 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0e:	201c      	movs	r0, #28
 8001a10:	f000 ff61 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	@ 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010c00 	.word	0x40010c00
 8001a24:	40010000 	.word	0x40010000

08001a28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <MX_USART1_UART_Init+0x50>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_USART1_UART_Init+0x4c>)
 8001a60:	f005 fbcc 	bl	80071fc <HAL_UART_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a6a:	f7ff fd81 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000210 	.word	0x20000210
 8001a78:	40013800 	.word	0x40013800

08001a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1c      	ldr	r2, [pc, #112]	@ (8001b08 <HAL_UART_MspInit+0x8c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d131      	bne.n	8001b00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_UART_MspInit+0x90>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b0c <HAL_UART_MspInit+0x90>)
 8001aa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_UART_MspInit+0x90>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_UART_MspInit+0x90>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <HAL_UART_MspInit+0x90>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_UART_MspInit+0x90>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480b      	ldr	r0, [pc, #44]	@ (8001b10 <HAL_UART_MspInit+0x94>)
 8001ae2:	f001 f993 	bl	8002e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <HAL_UART_MspInit+0x94>)
 8001afc:	f001 f986 	bl	8002e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010800 	.word	0x40010800

08001b14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b14:	f7ff feba 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480b      	ldr	r0, [pc, #44]	@ (8001b48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b1a:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b30:	4c09      	ldr	r4, [pc, #36]	@ (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f005 fe6d 	bl	800781c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b42:	f7ff f945 	bl	8000dd0 <main>
  bx lr
 8001b46:	4770      	bx	lr
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b50:	08008604 	.word	0x08008604
  ldr r2, =_sbss
 8001b54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b58:	200003a8 	.word	0x200003a8

08001b5c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <CAN1_RX1_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_Init+0x28>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a07      	ldr	r2, [pc, #28]	@ (8001b88 <HAL_Init+0x28>)
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 fe89 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b76:	200f      	movs	r0, #15
 8001b78:	f000 f808 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7c:	f7ff fd72 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_InitTick+0x54>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_InitTick+0x58>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 feaf 	bl	800290e <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00e      	b.n	8001bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d80a      	bhi.n	8001bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc8:	f000 fe69 	bl	800289e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bcc:	4a06      	ldr	r2, [pc, #24]	@ (8001be8 <HAL_InitTick+0x5c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000004 	.word	0x20000004
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <HAL_IncTick+0x1c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_IncTick+0x20>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a03      	ldr	r2, [pc, #12]	@ (8001c0c <HAL_IncTick+0x20>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	20000258 	.word	0x20000258

08001c10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b02      	ldr	r3, [pc, #8]	@ (8001c20 <HAL_GetTick+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000258 	.word	0x20000258

08001c24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0be      	b.n	8001dc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe feb8 	bl	80009d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fbbd 	bl	80023e8 <ADC_ConversionStop_Disable>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8099 	bne.w	8001db2 <HAL_ADC_Init+0x18e>
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 8095 	bne.w	8001db2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c90:	f023 0302 	bic.w	r3, r3, #2
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b1b      	ldrb	r3, [r3, #12]
 8001caa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cbc:	d003      	beq.n	8001cc6 <HAL_ADC_Init+0xa2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_ADC_Init+0xa8>
 8001cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cca:	e000      	b.n	8001cce <HAL_ADC_Init+0xaa>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7d1b      	ldrb	r3, [r3, #20]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d119      	bne.n	8001d10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7b1b      	ldrb	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	035a      	lsls	r2, r3, #13
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	e00b      	b.n	8001d10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <HAL_ADC_Init+0x1a8>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_Init+0x126>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d104      	bne.n	8001d54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	051b      	lsls	r3, r3, #20
 8001d52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_ADC_Init+0x1ac>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d8e:	e018      	b.n	8001dc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	f023 0312 	bic.w	r3, r3, #18
 8001d98:	f043 0210 	orr.w	r2, r3, #16
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001db0:	e007      	b.n	8001dc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	ffe1f7fd 	.word	0xffe1f7fd
 8001dd0:	ff1f0efe 	.word	0xff1f0efe

08001dd4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a64      	ldr	r2, [pc, #400]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_Start_DMA+0x24>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a63      	ldr	r2, [pc, #396]	@ (8001f80 <HAL_ADC_Start_DMA+0x1ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d106      	bne.n	8001e06 <HAL_ADC_Start_DMA+0x32>
 8001df8:	4b60      	ldr	r3, [pc, #384]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 80b3 	bne.w	8001f6c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_Start_DMA+0x40>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0ae      	b.n	8001f72 <HAL_ADC_Start_DMA+0x19e>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fa89 	bl	8002334 <ADC_Enable>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 809a 	bne.w	8001f62 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4e      	ldr	r2, [pc, #312]	@ (8001f80 <HAL_ADC_Start_DMA+0x1ac>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_Start_DMA+0x84>
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d115      	bne.n	8001e84 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d026      	beq.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e82:	e01d      	b.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a39      	ldr	r2, [pc, #228]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_Start_DMA+0xd0>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a38      	ldr	r2, [pc, #224]	@ (8001f80 <HAL_ADC_Start_DMA+0x1ac>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
 8001ea4:	4b35      	ldr	r3, [pc, #212]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	f023 0206 	bic.w	r2, r3, #6
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a25      	ldr	r2, [pc, #148]	@ (8001f84 <HAL_ADC_Start_DMA+0x1b0>)
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a24      	ldr	r2, [pc, #144]	@ (8001f88 <HAL_ADC_Start_DMA+0x1b4>)
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <HAL_ADC_Start_DMA+0x1b8>)
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0202 	mvn.w	r2, #2
 8001f08:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f18:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a18      	ldr	r0, [r3, #32]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	334c      	adds	r3, #76	@ 0x4c
 8001f24:	4619      	mov	r1, r3
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f000 fd57 	bl	80029dc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f38:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f3c:	d108      	bne.n	8001f50 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f4c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f4e:	e00f      	b.n	8001f70 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f5e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f60:	e006      	b.n	8001f70 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001f6a:	e001      	b.n	8001f70 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40012400 	.word	0x40012400
 8001f80:	40012800 	.word	0x40012800
 8001f84:	0800246b 	.word	0x0800246b
 8001f88:	080024e7 	.word	0x080024e7
 8001f8c:	08002503 	.word	0x08002503

08001f90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03e      	beq.n	8002030 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d039      	beq.n	8002030 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fde:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fe2:	d11d      	bne.n	8002020 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d119      	bne.n	8002020 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0220 	bic.w	r2, r2, #32
 8001ffa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fa65 	bl	80014f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0212 	mvn.w	r2, #18
 800202e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d04d      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d048      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002066:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800206a:	d012      	beq.n	8002092 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002076:	2b00      	cmp	r3, #0
 8002078:	d125      	bne.n	80020c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002084:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002088:	d11d      	bne.n	80020c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d119      	bne.n	80020c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fae4 	bl	8002694 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 020c 	mvn.w	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f812 	bl	8002120 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0201 	mvn.w	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x20>
 8002160:	2302      	movs	r3, #2
 8002162:	e0dc      	b.n	800231e <HAL_ADC_ConfigChannel+0x1da>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b06      	cmp	r3, #6
 8002172:	d81c      	bhi.n	80021ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b05      	subs	r3, #5
 8002186:	221f      	movs	r2, #31
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	4019      	ands	r1, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	3b05      	subs	r3, #5
 80021a0:	fa00 f203 	lsl.w	r2, r0, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ac:	e03c      	b.n	8002228 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d81c      	bhi.n	80021f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b23      	subs	r3, #35	@ 0x23
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	4019      	ands	r1, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3b23      	subs	r3, #35	@ 0x23
 80021e2:	fa00 f203 	lsl.w	r2, r0, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ee:	e01b      	b.n	8002228 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b41      	subs	r3, #65	@ 0x41
 8002202:	221f      	movs	r2, #31
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	4019      	ands	r1, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	3b41      	subs	r3, #65	@ 0x41
 800221c:	fa00 f203 	lsl.w	r2, r0, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b09      	cmp	r3, #9
 800222e:	d91c      	bls.n	800226a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68d9      	ldr	r1, [r3, #12]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	3b1e      	subs	r3, #30
 8002242:	2207      	movs	r2, #7
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	4019      	ands	r1, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6898      	ldr	r0, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	3b1e      	subs	r3, #30
 800225c:	fa00 f203 	lsl.w	r2, r0, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	e019      	b.n	800229e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	2207      	movs	r2, #7
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	4019      	ands	r1, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6898      	ldr	r0, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d003      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022aa:	2b11      	cmp	r3, #17
 80022ac:	d132      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <HAL_ADC_ConfigChannel+0x1e4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d125      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d126      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80022d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d11a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_ADC_ConfigChannel+0x1e8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a13      	ldr	r2, [pc, #76]	@ (8002330 <HAL_ADC_ConfigChannel+0x1ec>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	0c9a      	lsrs	r2, r3, #18
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022f4:	e002      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f9      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x1b2>
 8002302:	e007      	b.n	8002314 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40012400 	.word	0x40012400
 800232c:	20000004 	.word	0x20000004
 8002330:	431bde83 	.word	0x431bde83

08002334 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d040      	beq.n	80023d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002362:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <ADC_Enable+0xac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1f      	ldr	r2, [pc, #124]	@ (80023e4 <ADC_Enable+0xb0>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	0c9b      	lsrs	r3, r3, #18
 800236e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002370:	e002      	b.n	8002378 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3b01      	subs	r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800237e:	f7ff fc47 	bl	8001c10 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002384:	e01f      	b.n	80023c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002386:	f7ff fc43 	bl	8001c10 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d918      	bls.n	80023c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d011      	beq.n	80023c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e007      	b.n	80023d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d1d8      	bne.n	8002386 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000004 	.word	0x20000004
 80023e4:	431bde83 	.word	0x431bde83

080023e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12e      	bne.n	8002460 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002412:	f7ff fbfd 	bl	8001c10 <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002418:	e01b      	b.n	8002452 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800241a:	f7ff fbf9 	bl	8001c10 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d914      	bls.n	8002452 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10d      	bne.n	8002452 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e007      	b.n	8002462 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d0dc      	beq.n	800241a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002480:	2b00      	cmp	r3, #0
 8002482:	d127      	bne.n	80024d4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800249a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800249e:	d115      	bne.n	80024cc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d111      	bne.n	80024cc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff f80f 	bl	80014f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024d2:	e004      	b.n	80024de <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fe0a 	bl	800210e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fe02 	bl	8002132 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADCEx_Calibration_Start+0x1e>
 8002552:	2302      	movs	r3, #2
 8002554:	e097      	b.n	8002686 <HAL_ADCEx_Calibration_Start+0x14e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff42 	bl	80023e8 <ADC_ConversionStop_Disable>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fee3 	bl	8002334 <ADC_Enable>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 8081 	bne.w	800267c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002582:	f023 0302 	bic.w	r3, r3, #2
 8002586:	f043 0202 	orr.w	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800258e:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <HAL_ADCEx_Calibration_Start+0x158>)
 8002590:	681c      	ldr	r4, [r3, #0]
 8002592:	2002      	movs	r0, #2
 8002594:	f003 fad2 	bl	8005b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002598:	4603      	mov	r3, r0
 800259a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800259e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80025a0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80025a2:	e002      	b.n	80025aa <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f9      	bne.n	80025a4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0208 	orr.w	r2, r2, #8
 80025be:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80025c0:	f7ff fb26 	bl	8001c10 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80025c6:	e01b      	b.n	8002600 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80025c8:	f7ff fb22 	bl	8001c10 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b0a      	cmp	r3, #10
 80025d4:	d914      	bls.n	8002600 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	f023 0312 	bic.w	r3, r3, #18
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e042      	b.n	8002686 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1dc      	bne.n	80025c8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0204 	orr.w	r2, r2, #4
 800261c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800261e:	f7ff faf7 	bl	8001c10 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002624:	e01b      	b.n	800265e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002626:	f7ff faf3 	bl	8001c10 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b0a      	cmp	r3, #10
 8002632:	d914      	bls.n	800265e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	f023 0312 	bic.w	r3, r3, #18
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e013      	b.n	8002686 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1dc      	bne.n	8002626 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f023 0303 	bic.w	r3, r3, #3
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002684:	7dfb      	ldrb	r3, [r7, #23]
}
 8002686:	4618      	mov	r0, r3
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	bf00      	nop
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
	...

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4906      	ldr	r1, [pc, #24]	@ (8002740 <__NVIC_EnableIRQ+0x34>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db12      	blt.n	800277c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	490a      	ldr	r1, [pc, #40]	@ (8002788 <__NVIC_DisableIRQ+0x44>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	3320      	adds	r3, #32
 800276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002770:	f3bf 8f4f 	dsb	sy
}
 8002774:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002776:	f3bf 8f6f 	isb	sy
}
 800277a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002868:	f7ff ff90 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff09 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff1e 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff90 	bl	80027e0 <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5f 	bl	800278c <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff11 	bl	800270c <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff1f 	bl	8002744 <__NVIC_DisableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff94 	bl	8002844 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e043      	b.n	80029c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <HAL_DMA_Init+0xa8>)
 8002946:	4413      	add	r3, r2
 8002948:	4a22      	ldr	r2, [pc, #136]	@ (80029d4 <HAL_DMA_Init+0xac>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	009a      	lsls	r2, r3, #2
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1f      	ldr	r2, [pc, #124]	@ (80029d8 <HAL_DMA_Init+0xb0>)
 800295a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002972:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	bffdfff8 	.word	0xbffdfff8
 80029d4:	cccccccd 	.word	0xcccccccd
 80029d8:	40020000 	.word	0x40020000

080029dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_DMA_Start_IT+0x20>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e04b      	b.n	8002a94 <HAL_DMA_Start_IT+0xb8>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d13a      	bne.n	8002a86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f9bc 	bl	8002db2 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 020e 	orr.w	r2, r2, #14
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e00f      	b.n	8002a74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 020a 	orr.w	r2, r2, #10
 8002a72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e005      	b.n	8002a92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d005      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	e051      	b.n	8002b64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 020e 	bic.w	r2, r2, #14
 8002ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a22      	ldr	r2, [pc, #136]	@ (8002b70 <HAL_DMA_Abort_IT+0xd4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d029      	beq.n	8002b3e <HAL_DMA_Abort_IT+0xa2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a21      	ldr	r2, [pc, #132]	@ (8002b74 <HAL_DMA_Abort_IT+0xd8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x9e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <HAL_DMA_Abort_IT+0xdc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01a      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x98>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1e      	ldr	r2, [pc, #120]	@ (8002b7c <HAL_DMA_Abort_IT+0xe0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d012      	beq.n	8002b2e <HAL_DMA_Abort_IT+0x92>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <HAL_DMA_Abort_IT+0xe4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00a      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x8c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1b      	ldr	r2, [pc, #108]	@ (8002b84 <HAL_DMA_Abort_IT+0xe8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d102      	bne.n	8002b22 <HAL_DMA_Abort_IT+0x86>
 8002b1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b20:	e00e      	b.n	8002b40 <HAL_DMA_Abort_IT+0xa4>
 8002b22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b26:	e00b      	b.n	8002b40 <HAL_DMA_Abort_IT+0xa4>
 8002b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b2c:	e008      	b.n	8002b40 <HAL_DMA_Abort_IT+0xa4>
 8002b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b32:	e005      	b.n	8002b40 <HAL_DMA_Abort_IT+0xa4>
 8002b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b38:	e002      	b.n	8002b40 <HAL_DMA_Abort_IT+0xa4>
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	e000      	b.n	8002b40 <HAL_DMA_Abort_IT+0xa4>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	4a11      	ldr	r2, [pc, #68]	@ (8002b88 <HAL_DMA_Abort_IT+0xec>)
 8002b42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
    } 
  }
  return status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40020008 	.word	0x40020008
 8002b74:	4002001c 	.word	0x4002001c
 8002b78:	40020030 	.word	0x40020030
 8002b7c:	40020044 	.word	0x40020044
 8002b80:	40020058 	.word	0x40020058
 8002b84:	4002006c 	.word	0x4002006c
 8002b88:	40020000 	.word	0x40020000

08002b8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	2204      	movs	r2, #4
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d04f      	beq.n	8002c54 <HAL_DMA_IRQHandler+0xc8>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04a      	beq.n	8002c54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a66      	ldr	r2, [pc, #408]	@ (8002d7c <HAL_DMA_IRQHandler+0x1f0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d029      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xae>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a65      	ldr	r2, [pc, #404]	@ (8002d80 <HAL_DMA_IRQHandler+0x1f4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xaa>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a63      	ldr	r2, [pc, #396]	@ (8002d84 <HAL_DMA_IRQHandler+0x1f8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01a      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xa4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a62      	ldr	r2, [pc, #392]	@ (8002d88 <HAL_DMA_IRQHandler+0x1fc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d012      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x9e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a60      	ldr	r2, [pc, #384]	@ (8002d8c <HAL_DMA_IRQHandler+0x200>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x98>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a5f      	ldr	r2, [pc, #380]	@ (8002d90 <HAL_DMA_IRQHandler+0x204>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_DMA_IRQHandler+0x92>
 8002c18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c1c:	e00e      	b.n	8002c3c <HAL_DMA_IRQHandler+0xb0>
 8002c1e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c22:	e00b      	b.n	8002c3c <HAL_DMA_IRQHandler+0xb0>
 8002c24:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c28:	e008      	b.n	8002c3c <HAL_DMA_IRQHandler+0xb0>
 8002c2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c2e:	e005      	b.n	8002c3c <HAL_DMA_IRQHandler+0xb0>
 8002c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c34:	e002      	b.n	8002c3c <HAL_DMA_IRQHandler+0xb0>
 8002c36:	2340      	movs	r3, #64	@ 0x40
 8002c38:	e000      	b.n	8002c3c <HAL_DMA_IRQHandler+0xb0>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	4a55      	ldr	r2, [pc, #340]	@ (8002d94 <HAL_DMA_IRQHandler+0x208>)
 8002c3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8094 	beq.w	8002d72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c52:	e08e      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	2202      	movs	r2, #2
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d056      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x186>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d051      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 020a 	bic.w	r2, r2, #10
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a38      	ldr	r2, [pc, #224]	@ (8002d7c <HAL_DMA_IRQHandler+0x1f0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d029      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x166>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a37      	ldr	r2, [pc, #220]	@ (8002d80 <HAL_DMA_IRQHandler+0x1f4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_IRQHandler+0x162>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <HAL_DMA_IRQHandler+0x1f8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01a      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x15c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a34      	ldr	r2, [pc, #208]	@ (8002d88 <HAL_DMA_IRQHandler+0x1fc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d012      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x156>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a32      	ldr	r2, [pc, #200]	@ (8002d8c <HAL_DMA_IRQHandler+0x200>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00a      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x150>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a31      	ldr	r2, [pc, #196]	@ (8002d90 <HAL_DMA_IRQHandler+0x204>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d102      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x14a>
 8002cd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002cd4:	e00e      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x168>
 8002cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cda:	e00b      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x168>
 8002cdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce0:	e008      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x168>
 8002ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ce6:	e005      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x168>
 8002ce8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cec:	e002      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x168>
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e000      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x168>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	4a27      	ldr	r2, [pc, #156]	@ (8002d94 <HAL_DMA_IRQHandler+0x208>)
 8002cf6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d034      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d10:	e02f      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2208      	movs	r2, #8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d028      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x1e8>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 020e 	bic.w	r2, r2, #14
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
    }
  }
  return;
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
}
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40020008 	.word	0x40020008
 8002d80:	4002001c 	.word	0x4002001c
 8002d84:	40020030 	.word	0x40020030
 8002d88:	40020044 	.word	0x40020044
 8002d8c:	40020058 	.word	0x40020058
 8002d90:	4002006c 	.word	0x4002006c
 8002d94:	40020000 	.word	0x40020000

08002d98 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002da6:	b2db      	uxtb	r3, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d108      	bne.n	8002df2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002df0:	e007      	b.n	8002e02 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	60da      	str	r2, [r3, #12]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b08b      	sub	sp, #44	@ 0x2c
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1e:	e169      	b.n	80030f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e20:	2201      	movs	r2, #1
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f040 8158 	bne.w	80030ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a9a      	ldr	r2, [pc, #616]	@ (80030ac <HAL_GPIO_Init+0x2a0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d05e      	beq.n	8002f06 <HAL_GPIO_Init+0xfa>
 8002e48:	4a98      	ldr	r2, [pc, #608]	@ (80030ac <HAL_GPIO_Init+0x2a0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d875      	bhi.n	8002f3a <HAL_GPIO_Init+0x12e>
 8002e4e:	4a98      	ldr	r2, [pc, #608]	@ (80030b0 <HAL_GPIO_Init+0x2a4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d058      	beq.n	8002f06 <HAL_GPIO_Init+0xfa>
 8002e54:	4a96      	ldr	r2, [pc, #600]	@ (80030b0 <HAL_GPIO_Init+0x2a4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d86f      	bhi.n	8002f3a <HAL_GPIO_Init+0x12e>
 8002e5a:	4a96      	ldr	r2, [pc, #600]	@ (80030b4 <HAL_GPIO_Init+0x2a8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d052      	beq.n	8002f06 <HAL_GPIO_Init+0xfa>
 8002e60:	4a94      	ldr	r2, [pc, #592]	@ (80030b4 <HAL_GPIO_Init+0x2a8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d869      	bhi.n	8002f3a <HAL_GPIO_Init+0x12e>
 8002e66:	4a94      	ldr	r2, [pc, #592]	@ (80030b8 <HAL_GPIO_Init+0x2ac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d04c      	beq.n	8002f06 <HAL_GPIO_Init+0xfa>
 8002e6c:	4a92      	ldr	r2, [pc, #584]	@ (80030b8 <HAL_GPIO_Init+0x2ac>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d863      	bhi.n	8002f3a <HAL_GPIO_Init+0x12e>
 8002e72:	4a92      	ldr	r2, [pc, #584]	@ (80030bc <HAL_GPIO_Init+0x2b0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d046      	beq.n	8002f06 <HAL_GPIO_Init+0xfa>
 8002e78:	4a90      	ldr	r2, [pc, #576]	@ (80030bc <HAL_GPIO_Init+0x2b0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d85d      	bhi.n	8002f3a <HAL_GPIO_Init+0x12e>
 8002e7e:	2b12      	cmp	r3, #18
 8002e80:	d82a      	bhi.n	8002ed8 <HAL_GPIO_Init+0xcc>
 8002e82:	2b12      	cmp	r3, #18
 8002e84:	d859      	bhi.n	8002f3a <HAL_GPIO_Init+0x12e>
 8002e86:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <HAL_GPIO_Init+0x80>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002f07 	.word	0x08002f07
 8002e90:	08002ee1 	.word	0x08002ee1
 8002e94:	08002ef3 	.word	0x08002ef3
 8002e98:	08002f35 	.word	0x08002f35
 8002e9c:	08002f3b 	.word	0x08002f3b
 8002ea0:	08002f3b 	.word	0x08002f3b
 8002ea4:	08002f3b 	.word	0x08002f3b
 8002ea8:	08002f3b 	.word	0x08002f3b
 8002eac:	08002f3b 	.word	0x08002f3b
 8002eb0:	08002f3b 	.word	0x08002f3b
 8002eb4:	08002f3b 	.word	0x08002f3b
 8002eb8:	08002f3b 	.word	0x08002f3b
 8002ebc:	08002f3b 	.word	0x08002f3b
 8002ec0:	08002f3b 	.word	0x08002f3b
 8002ec4:	08002f3b 	.word	0x08002f3b
 8002ec8:	08002f3b 	.word	0x08002f3b
 8002ecc:	08002f3b 	.word	0x08002f3b
 8002ed0:	08002ee9 	.word	0x08002ee9
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	4a79      	ldr	r2, [pc, #484]	@ (80030c0 <HAL_GPIO_Init+0x2b4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ede:	e02c      	b.n	8002f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	623b      	str	r3, [r7, #32]
          break;
 8002ee6:	e029      	b.n	8002f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	3304      	adds	r3, #4
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e024      	b.n	8002f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	623b      	str	r3, [r7, #32]
          break;
 8002efa:	e01f      	b.n	8002f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	330c      	adds	r3, #12
 8002f02:	623b      	str	r3, [r7, #32]
          break;
 8002f04:	e01a      	b.n	8002f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f0e:	2304      	movs	r3, #4
 8002f10:	623b      	str	r3, [r7, #32]
          break;
 8002f12:	e013      	b.n	8002f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	611a      	str	r2, [r3, #16]
          break;
 8002f26:	e009      	b.n	8002f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f28:	2308      	movs	r3, #8
 8002f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	615a      	str	r2, [r3, #20]
          break;
 8002f32:	e003      	b.n	8002f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]
          break;
 8002f38:	e000      	b.n	8002f3c <HAL_GPIO_Init+0x130>
          break;
 8002f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2bff      	cmp	r3, #255	@ 0xff
 8002f40:	d801      	bhi.n	8002f46 <HAL_GPIO_Init+0x13a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	e001      	b.n	8002f4a <HAL_GPIO_Init+0x13e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2bff      	cmp	r3, #255	@ 0xff
 8002f50:	d802      	bhi.n	8002f58 <HAL_GPIO_Init+0x14c>
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	e002      	b.n	8002f5e <HAL_GPIO_Init+0x152>
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	3b08      	subs	r3, #8
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	210f      	movs	r1, #15
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	6a39      	ldr	r1, [r7, #32]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80b1 	beq.w	80030ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80030c4 <HAL_GPIO_Init+0x2b8>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4a4c      	ldr	r2, [pc, #304]	@ (80030c4 <HAL_GPIO_Init+0x2b8>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6193      	str	r3, [r2, #24]
 8002f98:	4b4a      	ldr	r3, [pc, #296]	@ (80030c4 <HAL_GPIO_Init+0x2b8>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fa4:	4a48      	ldr	r2, [pc, #288]	@ (80030c8 <HAL_GPIO_Init+0x2bc>)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	3302      	adds	r3, #2
 8002fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	220f      	movs	r2, #15
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a40      	ldr	r2, [pc, #256]	@ (80030cc <HAL_GPIO_Init+0x2c0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_GPIO_Init+0x1ec>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80030d0 <HAL_GPIO_Init+0x2c4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_GPIO_Init+0x1e8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3e      	ldr	r2, [pc, #248]	@ (80030d4 <HAL_GPIO_Init+0x2c8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <HAL_GPIO_Init+0x1e4>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80030d8 <HAL_GPIO_Init+0x2cc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_GPIO_Init+0x1e0>
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e006      	b.n	8002ffa <HAL_GPIO_Init+0x1ee>
 8002fec:	2304      	movs	r3, #4
 8002fee:	e004      	b.n	8002ffa <HAL_GPIO_Init+0x1ee>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e002      	b.n	8002ffa <HAL_GPIO_Init+0x1ee>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_GPIO_Init+0x1ee>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	f002 0203 	and.w	r2, r2, #3
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	4093      	lsls	r3, r2
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800300a:	492f      	ldr	r1, [pc, #188]	@ (80030c8 <HAL_GPIO_Init+0x2bc>)
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d006      	beq.n	8003032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003024:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	492c      	ldr	r1, [pc, #176]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003032:	4b2a      	ldr	r3, [pc, #168]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	43db      	mvns	r3, r3
 800303a:	4928      	ldr	r1, [pc, #160]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 800303c:	4013      	ands	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800304c:	4b23      	ldr	r3, [pc, #140]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4922      	ldr	r1, [pc, #136]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800305a:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	43db      	mvns	r3, r3
 8003062:	491e      	ldr	r1, [pc, #120]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 8003064:	4013      	ands	r3, r2
 8003066:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4918      	ldr	r1, [pc, #96]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003082:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	43db      	mvns	r3, r3
 800308a:	4914      	ldr	r1, [pc, #80]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 800308c:	4013      	ands	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d021      	beq.n	80030e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800309c:	4b0f      	ldr	r3, [pc, #60]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	490e      	ldr	r1, [pc, #56]	@ (80030dc <HAL_GPIO_Init+0x2d0>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e021      	b.n	80030ee <HAL_GPIO_Init+0x2e2>
 80030aa:	bf00      	nop
 80030ac:	10320000 	.word	0x10320000
 80030b0:	10310000 	.word	0x10310000
 80030b4:	10220000 	.word	0x10220000
 80030b8:	10210000 	.word	0x10210000
 80030bc:	10120000 	.word	0x10120000
 80030c0:	10110000 	.word	0x10110000
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40010800 	.word	0x40010800
 80030d0:	40010c00 	.word	0x40010c00
 80030d4:	40011000 	.word	0x40011000
 80030d8:	40011400 	.word	0x40011400
 80030dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <HAL_GPIO_Init+0x304>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	4909      	ldr	r1, [pc, #36]	@ (8003110 <HAL_GPIO_Init+0x304>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	3301      	adds	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	fa22 f303 	lsr.w	r3, r2, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f47f ae8e 	bne.w	8002e20 <HAL_GPIO_Init+0x14>
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	372c      	adds	r7, #44	@ 0x2c
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40010400 	.word	0x40010400

08003114 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003122:	e09a      	b.n	800325a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003124:	2201      	movs	r2, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 808d 	beq.w	8003254 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800313a:	4a4e      	ldr	r2, [pc, #312]	@ (8003274 <HAL_GPIO_DeInit+0x160>)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4013      	ands	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a46      	ldr	r2, [pc, #280]	@ (8003278 <HAL_GPIO_DeInit+0x164>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_GPIO_DeInit+0x78>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a45      	ldr	r2, [pc, #276]	@ (800327c <HAL_GPIO_DeInit+0x168>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00d      	beq.n	8003188 <HAL_GPIO_DeInit+0x74>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a44      	ldr	r2, [pc, #272]	@ (8003280 <HAL_GPIO_DeInit+0x16c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <HAL_GPIO_DeInit+0x70>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a43      	ldr	r2, [pc, #268]	@ (8003284 <HAL_GPIO_DeInit+0x170>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_GPIO_DeInit+0x6c>
 800317c:	2303      	movs	r3, #3
 800317e:	e006      	b.n	800318e <HAL_GPIO_DeInit+0x7a>
 8003180:	2304      	movs	r3, #4
 8003182:	e004      	b.n	800318e <HAL_GPIO_DeInit+0x7a>
 8003184:	2302      	movs	r3, #2
 8003186:	e002      	b.n	800318e <HAL_GPIO_DeInit+0x7a>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_GPIO_DeInit+0x7a>
 800318c:	2300      	movs	r3, #0
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	f002 0203 	and.w	r2, r2, #3
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4093      	lsls	r3, r2
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	429a      	cmp	r2, r3
 800319c:	d132      	bne.n	8003204 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800319e:	4b3a      	ldr	r3, [pc, #232]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4938      	ldr	r1, [pc, #224]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80031ac:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	4934      	ldr	r1, [pc, #208]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80031ba:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	4931      	ldr	r1, [pc, #196]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80031c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	492d      	ldr	r1, [pc, #180]	@ (8003288 <HAL_GPIO_DeInit+0x174>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80031e6:	4a23      	ldr	r2, [pc, #140]	@ (8003274 <HAL_GPIO_DeInit+0x160>)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	481f      	ldr	r0, [pc, #124]	@ (8003274 <HAL_GPIO_DeInit+0x160>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	400a      	ands	r2, r1
 80031fe:	3302      	adds	r3, #2
 8003200:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2bff      	cmp	r3, #255	@ 0xff
 8003208:	d801      	bhi.n	800320e <HAL_GPIO_DeInit+0xfa>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_DeInit+0xfe>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2bff      	cmp	r3, #255	@ 0xff
 8003218:	d802      	bhi.n	8003220 <HAL_GPIO_DeInit+0x10c>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_DeInit+0x112>
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	3b08      	subs	r3, #8
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	210f      	movs	r1, #15
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	2104      	movs	r1, #4
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	43db      	mvns	r3, r3
 800324e:	401a      	ands	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f af5e 	bne.w	8003124 <HAL_GPIO_DeInit+0x10>
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3724      	adds	r7, #36	@ 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40010000 	.word	0x40010000
 8003278:	40010800 	.word	0x40010800
 800327c:	40010c00 	.word	0x40010c00
 8003280:	40011000 	.word	0x40011000
 8003284:	40011400 	.word	0x40011400
 8003288:	40010400 	.word	0x40010400

0800328c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e001      	b.n	80032ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	807b      	strh	r3, [r7, #2]
 80032c6:	4613      	mov	r3, r2
 80032c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ca:	787b      	ldrb	r3, [r7, #1]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d0:	887a      	ldrh	r2, [r7, #2]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032d6:	e003      	b.n	80032e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	041a      	lsls	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	611a      	str	r2, [r3, #16]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e12b      	b.n	8003556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fc88 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	@ 0x24
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800333e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800334e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003350:	f002 faf8 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 8003354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4a81      	ldr	r2, [pc, #516]	@ (8003560 <HAL_I2C_Init+0x274>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d807      	bhi.n	8003370 <HAL_I2C_Init+0x84>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a80      	ldr	r2, [pc, #512]	@ (8003564 <HAL_I2C_Init+0x278>)
 8003364:	4293      	cmp	r3, r2
 8003366:	bf94      	ite	ls
 8003368:	2301      	movls	r3, #1
 800336a:	2300      	movhi	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e006      	b.n	800337e <HAL_I2C_Init+0x92>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a7d      	ldr	r2, [pc, #500]	@ (8003568 <HAL_I2C_Init+0x27c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	bf94      	ite	ls
 8003378:	2301      	movls	r3, #1
 800337a:	2300      	movhi	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0e7      	b.n	8003556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a78      	ldr	r2, [pc, #480]	@ (800356c <HAL_I2C_Init+0x280>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0c9b      	lsrs	r3, r3, #18
 8003390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003560 <HAL_I2C_Init+0x274>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d802      	bhi.n	80033c0 <HAL_I2C_Init+0xd4>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3301      	adds	r3, #1
 80033be:	e009      	b.n	80033d4 <HAL_I2C_Init+0xe8>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	4a69      	ldr	r2, [pc, #420]	@ (8003570 <HAL_I2C_Init+0x284>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	3301      	adds	r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	430b      	orrs	r3, r1
 80033da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	495c      	ldr	r1, [pc, #368]	@ (8003560 <HAL_I2C_Init+0x274>)
 80033f0:	428b      	cmp	r3, r1
 80033f2:	d819      	bhi.n	8003428 <HAL_I2C_Init+0x13c>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e59      	subs	r1, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003402:	1c59      	adds	r1, r3, #1
 8003404:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003408:	400b      	ands	r3, r1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_I2C_Init+0x138>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1e59      	subs	r1, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fbb1 f3f3 	udiv	r3, r1, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003422:	e051      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 8003424:	2304      	movs	r3, #4
 8003426:	e04f      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d111      	bne.n	8003454 <HAL_I2C_Init+0x168>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e58      	subs	r0, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	440b      	add	r3, r1
 800343e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003442:	3301      	adds	r3, #1
 8003444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e012      	b.n	800347a <HAL_I2C_Init+0x18e>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	0099      	lsls	r1, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Init+0x196>
 800347e:	2301      	movs	r3, #1
 8003480:	e022      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10e      	bne.n	80034a8 <HAL_I2C_Init+0x1bc>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1e58      	subs	r0, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	440b      	add	r3, r1
 8003498:	fbb0 f3f3 	udiv	r3, r0, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a6:	e00f      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	0099      	lsls	r1, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80034be:	3301      	adds	r3, #1
 80034c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	6809      	ldr	r1, [r1, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6911      	ldr	r1, [r2, #16]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68d2      	ldr	r2, [r2, #12]
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	430b      	orrs	r3, r1
 800350a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	000186a0 	.word	0x000186a0
 8003564:	001e847f 	.word	0x001e847f
 8003568:	003d08ff 	.word	0x003d08ff
 800356c:	431bde83 	.word	0x431bde83
 8003570:	10624dd3 	.word	0x10624dd3

08003574 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e021      	b.n	80035ca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	@ 0x24
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fb90 	bl	8000cc4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b80      	cmp	r3, #128	@ 0x80
 80035e6:	d103      	bne.n	80035f0 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	611a      	str	r2, [r3, #16]
  }
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b087      	sub	sp, #28
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003616:	2b28      	cmp	r3, #40	@ 0x28
 8003618:	d15b      	bne.n	80036d2 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e054      	b.n	80036d4 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003634:	2302      	movs	r3, #2
 8003636:	e04d      	b.n	80036d4 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d007      	beq.n	800365e <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2229      	movs	r2, #41	@ 0x29
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80036cc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80036de:	b480      	push	{r7}
 80036e0:	b087      	sub	sp, #28
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036fa:	2b28      	cmp	r3, #40	@ 0x28
 80036fc:	d15b      	bne.n	80037b6 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e054      	b.n	80037b8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003718:	2302      	movs	r3, #2
 800371a:	e04d      	b.n	80037b8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d007      	beq.n	8003742 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003750:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	222a      	movs	r2, #42	@ 0x2a
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80037b0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d124      	bne.n	8003820 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2228      	movs	r2, #40	@ 0x28
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d007      	beq.n	80037fc <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800380a:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800381a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800384c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003854:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b10      	cmp	r3, #16
 800385a:	d003      	beq.n	8003864 <HAL_I2C_EV_IRQHandler+0x38>
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	f040 80c1 	bne.w	80039e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <HAL_I2C_EV_IRQHandler+0x6e>
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003884:	d003      	beq.n	800388e <HAL_I2C_EV_IRQHandler+0x62>
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800388c:	d101      	bne.n	8003892 <HAL_I2C_EV_IRQHandler+0x66>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x68>
 8003892:	2300      	movs	r3, #0
 8003894:	2b01      	cmp	r3, #1
 8003896:	f000 8132 	beq.w	8003afe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <HAL_I2C_EV_IRQHandler+0x92>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f001 fc57 	bl	8005164 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fd54 	bl	8004364 <I2C_Master_SB>
 80038bc:	e092      	b.n	80039e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	08db      	lsrs	r3, r3, #3
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_I2C_EV_IRQHandler+0xb2>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fdc9 	bl	800446e <I2C_Master_ADD10>
 80038dc:	e082      	b.n	80039e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_I2C_EV_IRQHandler+0xd2>
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	0a5b      	lsrs	r3, r3, #9
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fde2 	bl	80044c0 <I2C_Master_ADDR>
 80038fc:	e072      	b.n	80039e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d03b      	beq.n	8003982 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003918:	f000 80f3 	beq.w	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00f      	beq.n	8003948 <HAL_I2C_EV_IRQHandler+0x11c>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	0a9b      	lsrs	r3, r3, #10
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_I2C_EV_IRQHandler+0x11c>
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f9c0 	bl	8003cc6 <I2C_MasterTransmit_TXE>
 8003946:	e04d      	b.n	80039e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80d6 	beq.w	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	0a5b      	lsrs	r3, r3, #9
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80cf 	beq.w	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003964:	7bbb      	ldrb	r3, [r7, #14]
 8003966:	2b21      	cmp	r3, #33	@ 0x21
 8003968:	d103      	bne.n	8003972 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fa47 	bl	8003dfe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003970:	e0c7      	b.n	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	f040 80c4 	bne.w	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fab5 	bl	8003eea <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003980:	e0bf      	b.n	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003990:	f000 80b7 	beq.w	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00f      	beq.n	80039c0 <HAL_I2C_EV_IRQHandler+0x194>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	0a9b      	lsrs	r3, r3, #10
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_I2C_EV_IRQHandler+0x194>
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fb2e 	bl	800401a <I2C_MasterReceive_RXNE>
 80039be:	e011      	b.n	80039e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 809a 	beq.w	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	0a5b      	lsrs	r3, r3, #9
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8093 	beq.w	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fbd7 	bl	8004190 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e2:	e08e      	b.n	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039e4:	e08d      	b.n	8003b02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e007      	b.n	8003a08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d012      	beq.n	8003a3a <HAL_I2C_EV_IRQHandler+0x20e>
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	0a5b      	lsrs	r3, r3, #9
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00c      	beq.n	8003a3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 ff9b 	bl	800496e <I2C_Slave_ADDR>
 8003a38:	e066      	b.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x22e>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	0a5b      	lsrs	r3, r3, #9
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 ffd6 	bl	8004a04 <I2C_Slave_STOPF>
 8003a58:	e056      	b.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a5a:	7bbb      	ldrb	r3, [r7, #14]
 8003a5c:	2b21      	cmp	r3, #33	@ 0x21
 8003a5e:	d002      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x23a>
 8003a60:	7bbb      	ldrb	r3, [r7, #14]
 8003a62:	2b29      	cmp	r3, #41	@ 0x29
 8003a64:	d125      	bne.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	09db      	lsrs	r3, r3, #7
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00f      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0x266>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	0a9b      	lsrs	r3, r3, #10
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_I2C_EV_IRQHandler+0x266>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d103      	bne.n	8003a92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 feb3 	bl	80047f6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a90:	e039      	b.n	8003b06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d033      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0x2da>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	0a5b      	lsrs	r3, r3, #9
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02d      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fee0 	bl	8004870 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ab0:	e029      	b.n	8003b06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00f      	beq.n	8003ade <HAL_I2C_EV_IRQHandler+0x2b2>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	0a9b      	lsrs	r3, r3, #10
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_I2C_EV_IRQHandler+0x2b2>
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 feea 	bl	80048b0 <I2C_SlaveReceive_RXNE>
 8003adc:	e014      	b.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	0a5b      	lsrs	r3, r3, #9
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 ff18 	bl	800492c <I2C_SlaveReceive_BTF>
 8003afc:	e004      	b.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08a      	sub	sp, #40	@ 0x28
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_I2C_ER_IRQHandler+0x5e>
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b5a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	0a5b      	lsrs	r3, r3, #9
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <HAL_I2C_ER_IRQHandler+0x88>
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003b94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	0a9b      	lsrs	r3, r3, #10
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03f      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x114>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d039      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003bae:	7efb      	ldrb	r3, [r7, #27]
 8003bb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003bc8:	7ebb      	ldrb	r3, [r7, #26]
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d112      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xe6>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xe6>
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b21      	cmp	r3, #33	@ 0x21
 8003bd8:	d008      	beq.n	8003bec <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b29      	cmp	r3, #41	@ 0x29
 8003bde:	d005      	beq.n	8003bec <HAL_I2C_ER_IRQHandler+0xde>
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	2b28      	cmp	r3, #40	@ 0x28
 8003be4:	d106      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b21      	cmp	r3, #33	@ 0x21
 8003bea:	d103      	bne.n	8003bf4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 f839 	bl	8004c64 <I2C_Slave_AF>
 8003bf2:	e016      	b.n	8003c22 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c06:	7efb      	ldrb	r3, [r7, #27]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d002      	beq.n	8003c12 <HAL_I2C_ER_IRQHandler+0x104>
 8003c0c:	7efb      	ldrb	r3, [r7, #27]
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	d107      	bne.n	8003c22 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	0adb      	lsrs	r3, r3, #11
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0x13e>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003c4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f001 f874 	bl	8004d4c <I2C_ITError>
  }
}
 8003c64:	bf00      	nop
 8003c66:	3728      	adds	r7, #40	@ 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cdc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d150      	bne.n	8003d8e <I2C_MasterTransmit_TXE+0xc8>
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b21      	cmp	r3, #33	@ 0x21
 8003cf0:	d14d      	bne.n	8003d8e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d01d      	beq.n	8003d34 <I2C_MasterTransmit_TXE+0x6e>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d01a      	beq.n	8003d34 <I2C_MasterTransmit_TXE+0x6e>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d04:	d016      	beq.n	8003d34 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d14:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2211      	movs	r2, #17
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff9d 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d32:	e060      	b.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d42:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d52:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d107      	bne.n	8003d7e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff ff8a 	bl	8003c90 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d7c:	e03b      	b.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff70 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d8c:	e033      	b.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b21      	cmp	r3, #33	@ 0x21
 8003d92:	d005      	beq.n	8003da0 <I2C_MasterTransmit_TXE+0xda>
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
 8003d96:	2b40      	cmp	r3, #64	@ 0x40
 8003d98:	d12d      	bne.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b22      	cmp	r3, #34	@ 0x22
 8003d9e:	d12a      	bne.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d108      	bne.n	8003dbc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003dba:	e01c      	b.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d103      	bne.n	8003dd0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f88e 	bl	8003eea <I2C_MemoryTransmit_TXE_BTF>
}
 8003dce:	e012      	b.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003df4:	e7ff      	b.n	8003df6 <I2C_MasterTransmit_TXE+0x130>
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b21      	cmp	r3, #33	@ 0x21
 8003e16:	d164      	bne.n	8003ee2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d012      	beq.n	8003e48 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e46:	e04c      	b.n	8003ee2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d01d      	beq.n	8003e8a <I2C_MasterTransmit_BTF+0x8c>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d01a      	beq.n	8003e8a <I2C_MasterTransmit_BTF+0x8c>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e5a:	d016      	beq.n	8003e8a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e6a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2211      	movs	r2, #17
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fef2 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
}
 8003e88:	e02b      	b.n	8003ee2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e98:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b40      	cmp	r3, #64	@ 0x40
 8003ec2:	d107      	bne.n	8003ed4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fedf 	bl	8003c90 <HAL_I2C_MemTxCpltCallback>
}
 8003ed2:	e006      	b.n	8003ee2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fec5 	bl	8003c6c <HAL_I2C_MasterTxCpltCallback>
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d11d      	bne.n	8003f3e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10b      	bne.n	8003f22 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003f20:	e077      	b.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	121b      	asrs	r3, r3, #8
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f3c:	e069      	b.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d10b      	bne.n	8003f5e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f5c:	e059      	b.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d152      	bne.n	800400c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b22      	cmp	r3, #34	@ 0x22
 8003f6a:	d10d      	bne.n	8003f88 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f7a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f86:	e044      	b.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d015      	beq.n	8003fbe <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b21      	cmp	r3, #33	@ 0x21
 8003f96:	d112      	bne.n	8003fbe <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fbc:	e029      	b.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d124      	bne.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b21      	cmp	r3, #33	@ 0x21
 8003fcc:	d121      	bne.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fdc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fec:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fe43 	bl	8003c90 <HAL_I2C_MemTxCpltCallback>
}
 800400a:	e002      	b.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fae0 	bl	80035d2 <I2C_Flush_DR>
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b22      	cmp	r3, #34	@ 0x22
 800402c:	f040 80ac 	bne.w	8004188 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d921      	bls.n	8004082 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b03      	cmp	r3, #3
 800406c:	f040 808c 	bne.w	8004188 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004080:	e082      	b.n	8004188 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	2b02      	cmp	r3, #2
 8004088:	d075      	beq.n	8004176 <I2C_MasterReceive_RXNE+0x15c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d002      	beq.n	8004096 <I2C_MasterReceive_RXNE+0x7c>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d16f      	bne.n	8004176 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f001 f832 	bl	8005100 <I2C_WaitOnSTOPRequestThroughIT>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d142      	bne.n	8004128 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d10a      	bne.n	8004112 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fdc9 	bl	8003ca2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004110:	e03a      	b.n	8004188 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2212      	movs	r2, #18
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff fdac 	bl	8003c7e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004126:	e02f      	b.n	8004188 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004136:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd f9ac 	bl	80014cc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004174:	e008      	b.n	8004188 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004184:	605a      	str	r2, [r3, #4]
}
 8004186:	e7ff      	b.n	8004188 <I2C_MasterReceive_RXNE+0x16e>
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d11b      	bne.n	80041e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041de:	e0bd      	b.n	800435c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d129      	bne.n	800423e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d00a      	beq.n	8004216 <I2C_MasterReceive_BTF+0x86>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d007      	beq.n	8004216 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004214:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800423c:	e08e      	b.n	800435c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d176      	bne.n	8004336 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d002      	beq.n	8004254 <I2C_MasterReceive_BTF+0xc4>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b10      	cmp	r3, #16
 8004252:	d108      	bne.n	8004266 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e019      	b.n	800429a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d002      	beq.n	8004272 <I2C_MasterReceive_BTF+0xe2>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d108      	bne.n	8004284 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e00a      	b.n	800429a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b10      	cmp	r3, #16
 8004288:	d007      	beq.n	800429a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004298:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80042f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d10a      	bne.n	8004320 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff fcc2 	bl	8003ca2 <HAL_I2C_MemRxCpltCallback>
}
 800431e:	e01d      	b.n	800435c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2212      	movs	r2, #18
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff fca5 	bl	8003c7e <HAL_I2C_MasterRxCpltCallback>
}
 8004334:	e012      	b.n	800435c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b40      	cmp	r3, #64	@ 0x40
 8004376:	d117      	bne.n	80043a8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004390:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004392:	e067      	b.n	8004464 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	611a      	str	r2, [r3, #16]
}
 80043a6:	e05d      	b.n	8004464 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043b0:	d133      	bne.n	800441a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b21      	cmp	r3, #33	@ 0x21
 80043bc:	d109      	bne.n	80043d2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043ce:	611a      	str	r2, [r3, #16]
 80043d0:	e008      	b.n	80043e4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <I2C_Master_SB+0x92>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d032      	beq.n	8004464 <I2C_Master_SB+0x100>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	d02d      	beq.n	8004464 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004416:	605a      	str	r2, [r3, #4]
}
 8004418:	e024      	b.n	8004464 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10e      	bne.n	8004440 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	b29b      	uxth	r3, r3
 8004428:	11db      	asrs	r3, r3, #7
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0306 	and.w	r3, r3, #6
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f063 030f 	orn	r3, r3, #15
 8004436:	b2da      	uxtb	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	611a      	str	r2, [r3, #16]
}
 800443e:	e011      	b.n	8004464 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10d      	bne.n	8004464 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	b29b      	uxth	r3, r3
 800444e:	11db      	asrs	r3, r3, #7
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 0306 	and.w	r3, r3, #6
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f063 030e 	orn	r3, r3, #14
 800445c:	b2da      	uxtb	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447a:	b2da      	uxtb	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <I2C_Master_ADD10+0x26>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <I2C_Master_ADD10+0x48>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b4:	605a      	str	r2, [r3, #4]
  }
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b091      	sub	sp, #68	@ 0x44
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b22      	cmp	r3, #34	@ 0x22
 80044e8:	f040 8174 	bne.w	80047d4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <I2C_Master_ADDR+0x54>
 80044f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d10b      	bne.n	8004514 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fc:	2300      	movs	r3, #0
 80044fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	633b      	str	r3, [r7, #48]	@ 0x30
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	e16b      	b.n	80047ec <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11d      	bne.n	8004558 <I2C_Master_ADDR+0x98>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004524:	d118      	bne.n	8004558 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800454a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	651a      	str	r2, [r3, #80]	@ 0x50
 8004556:	e149      	b.n	80047ec <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e120      	b.n	80047cc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 808a 	bne.w	80046aa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004598:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800459c:	d137      	bne.n	800460e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045bc:	d113      	bne.n	80045e6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045cc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	e0f2      	b.n	80047cc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e6:	2300      	movs	r3, #0
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e0de      	b.n	80047cc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004610:	2b08      	cmp	r3, #8
 8004612:	d02e      	beq.n	8004672 <I2C_Master_ADDR+0x1b2>
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	2b20      	cmp	r3, #32
 8004618:	d02b      	beq.n	8004672 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800461a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461c:	2b12      	cmp	r3, #18
 800461e:	d102      	bne.n	8004626 <I2C_Master_ADDR+0x166>
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	2b01      	cmp	r3, #1
 8004624:	d125      	bne.n	8004672 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004628:	2b04      	cmp	r3, #4
 800462a:	d00e      	beq.n	800464a <I2C_Master_ADDR+0x18a>
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	2b02      	cmp	r3, #2
 8004630:	d00b      	beq.n	800464a <I2C_Master_ADDR+0x18a>
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	2b10      	cmp	r3, #16
 8004636:	d008      	beq.n	800464a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e007      	b.n	800465a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004658:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	e0ac      	b.n	80047cc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004680:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e090      	b.n	80047cc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d158      	bne.n	8004766 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d021      	beq.n	80046fe <I2C_Master_ADDR+0x23e>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d01e      	beq.n	80046fe <I2C_Master_ADDR+0x23e>
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d01b      	beq.n	80046fe <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046d4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e012      	b.n	8004724 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800470c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800472e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004732:	d14b      	bne.n	80047cc <I2C_Master_ADDR+0x30c>
 8004734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004736:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800473a:	d00b      	beq.n	8004754 <I2C_Master_ADDR+0x294>
 800473c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473e:	2b01      	cmp	r3, #1
 8004740:	d008      	beq.n	8004754 <I2C_Master_ADDR+0x294>
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2b08      	cmp	r3, #8
 8004746:	d005      	beq.n	8004754 <I2C_Master_ADDR+0x294>
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	2b10      	cmp	r3, #16
 800474c:	d002      	beq.n	8004754 <I2C_Master_ADDR+0x294>
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2b20      	cmp	r3, #32
 8004752:	d13b      	bne.n	80047cc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004762:	605a      	str	r2, [r3, #4]
 8004764:	e032      	b.n	80047cc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004774:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004784:	d117      	bne.n	80047b6 <I2C_Master_ADDR+0x2f6>
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800478c:	d00b      	beq.n	80047a6 <I2C_Master_ADDR+0x2e6>
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	2b01      	cmp	r3, #1
 8004792:	d008      	beq.n	80047a6 <I2C_Master_ADDR+0x2e6>
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	2b08      	cmp	r3, #8
 8004798:	d005      	beq.n	80047a6 <I2C_Master_ADDR+0x2e6>
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	2b10      	cmp	r3, #16
 800479e:	d002      	beq.n	80047a6 <I2C_Master_ADDR+0x2e6>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d107      	bne.n	80047b6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047d2:	e00b      	b.n	80047ec <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
}
 80047ea:	e7ff      	b.n	80047ec <I2C_Master_ADDR+0x32c>
 80047ec:	bf00      	nop
 80047ee:	3744      	adds	r7, #68	@ 0x44
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004804:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02b      	beq.n	8004868 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d114      	bne.n	8004868 <I2C_SlaveTransmit_TXE+0x72>
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b29      	cmp	r3, #41	@ 0x29
 8004842:	d111      	bne.n	8004868 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004852:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2221      	movs	r2, #33	@ 0x21
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2228      	movs	r2, #40	@ 0x28
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fc fe29 	bl	80014ba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d011      	beq.n	80048a6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d02c      	beq.n	8004924 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d114      	bne.n	8004924 <I2C_SlaveReceive_RXNE+0x74>
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80048fe:	d111      	bne.n	8004924 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800490e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2222      	movs	r2, #34	@ 0x22
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2228      	movs	r2, #40	@ 0x28
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fdc2 	bl	80014a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d012      	beq.n	8004964 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr

0800496e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004978:	2300      	movs	r3, #0
 800497a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004988:	2b28      	cmp	r3, #40	@ 0x28
 800498a:	d127      	bne.n	80049dc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	09db      	lsrs	r3, r3, #7
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	81bb      	strh	r3, [r7, #12]
 80049be:	e002      	b.n	80049c6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049ce:	89ba      	ldrh	r2, [r7, #12]
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fc fcef 	bl	80013b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049da:	e00e      	b.n	80049fa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a60:	d172      	bne.n	8004b48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b22      	cmp	r3, #34	@ 0x22
 8004a66:	d002      	beq.n	8004a6e <I2C_Slave_STOPF+0x6a>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a6c:	d135      	bne.n	8004ada <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f043 0204 	orr.w	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe f976 	bl	8002d98 <HAL_DMA_GetState>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d049      	beq.n	8004b46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	4a69      	ldr	r2, [pc, #420]	@ (8004c5c <I2C_Slave_STOPF+0x258>)
 8004ab8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fd ffec 	bl	8002a9c <HAL_DMA_Abort_IT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03d      	beq.n	8004b46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad8:	e035      	b.n	8004b46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe f940 	bl	8002d98 <HAL_DMA_GetState>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d014      	beq.n	8004b48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b22:	4a4e      	ldr	r2, [pc, #312]	@ (8004c5c <I2C_Slave_STOPF+0x258>)
 8004b24:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd ffb6 	bl	8002a9c <HAL_DMA_Abort_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
 8004b44:	e000      	b.n	8004b48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d03e      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d112      	bne.n	8004b86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d112      	bne.n	8004bba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8b7 	bl	8004d4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bde:	e039      	b.n	8004c54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004be4:	d109      	bne.n	8004bfa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2228      	movs	r2, #40	@ 0x28
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fc fc57 	bl	80014a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b28      	cmp	r3, #40	@ 0x28
 8004c04:	d111      	bne.n	8004c2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a15      	ldr	r2, [pc, #84]	@ (8004c60 <I2C_Slave_STOPF+0x25c>)
 8004c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc fbbc 	bl	80013a0 <HAL_I2C_ListenCpltCallback>
}
 8004c28:	e014      	b.n	8004c54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	2b22      	cmp	r3, #34	@ 0x22
 8004c30:	d002      	beq.n	8004c38 <I2C_Slave_STOPF+0x234>
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b22      	cmp	r3, #34	@ 0x22
 8004c36:	d10d      	bne.n	8004c54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fc2a 	bl	80014a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	08004fb1 	.word	0x08004fb1
 8004c60:	ffff0000 	.word	0xffff0000

08004c64 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d002      	beq.n	8004c86 <I2C_Slave_AF+0x22>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d129      	bne.n	8004cda <I2C_Slave_AF+0x76>
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b28      	cmp	r3, #40	@ 0x28
 8004c8a:	d126      	bne.n	8004cda <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <I2C_Slave_AF+0xe4>)
 8004c90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ca0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004caa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc fb64 	bl	80013a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004cd8:	e031      	b.n	8004d3e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b21      	cmp	r3, #33	@ 0x21
 8004cde:	d129      	bne.n	8004d34 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <I2C_Slave_AF+0xe4>)
 8004ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2221      	movs	r2, #33	@ 0x21
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d24:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fe fc53 	bl	80035d2 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fc fbc4 	bl	80014ba <HAL_I2C_SlaveTxCpltCallback>
}
 8004d32:	e004      	b.n	8004d3e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d3c:	615a      	str	r2, [r3, #20]
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	ffff0000 	.word	0xffff0000

08004d4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d64:	7bbb      	ldrb	r3, [r7, #14]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d002      	beq.n	8004d70 <I2C_ITError+0x24>
 8004d6a:	7bbb      	ldrb	r3, [r7, #14]
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d10a      	bne.n	8004d86 <I2C_ITError+0x3a>
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b22      	cmp	r3, #34	@ 0x22
 8004d74:	d107      	bne.n	8004d86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d8c:	2b28      	cmp	r3, #40	@ 0x28
 8004d8e:	d107      	bne.n	8004da0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2228      	movs	r2, #40	@ 0x28
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d9e:	e015      	b.n	8004dcc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dae:	d00a      	beq.n	8004dc6 <I2C_ITError+0x7a>
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b60      	cmp	r3, #96	@ 0x60
 8004db4:	d007      	beq.n	8004dc6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dda:	d162      	bne.n	8004ea2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d020      	beq.n	8004e3c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfe:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa8 <I2C_ITError+0x25c>)
 8004e00:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd fe48 	bl	8002a9c <HAL_DMA_Abort_IT>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8089 	beq.w	8004f26 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e36:	4610      	mov	r0, r2
 8004e38:	4798      	blx	r3
 8004e3a:	e074      	b.n	8004f26 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	4a59      	ldr	r2, [pc, #356]	@ (8004fa8 <I2C_ITError+0x25c>)
 8004e42:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd fe27 	bl	8002a9c <HAL_DMA_Abort_IT>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d068      	beq.n	8004f26 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5e:	2b40      	cmp	r3, #64	@ 0x40
 8004e60:	d10b      	bne.n	8004e7a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0201 	bic.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
 8004ea0:	e041      	b.n	8004f26 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b60      	cmp	r3, #96	@ 0x60
 8004eac:	d125      	bne.n	8004efa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d10b      	bne.n	8004ee2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fe fede 	bl	8003cb4 <HAL_I2C_AbortCpltCallback>
 8004ef8:	e015      	b.n	8004f26 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f04:	2b40      	cmp	r3, #64	@ 0x40
 8004f06:	d10b      	bne.n	8004f20 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fc fad3 	bl	80014cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10e      	bne.n	8004f54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f62:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d113      	bne.n	8004fa0 <I2C_ITError+0x254>
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b28      	cmp	r3, #40	@ 0x28
 8004f7c:	d110      	bne.n	8004fa0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a0a      	ldr	r2, [pc, #40]	@ (8004fac <I2C_ITError+0x260>)
 8004f82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fc fa00 	bl	80013a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08004fb1 	.word	0x08004fb1
 8004fac:	ffff0000 	.word	0xffff0000

08004fb0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fca:	4b4b      	ldr	r3, [pc, #300]	@ (80050f8 <I2C_DMAAbort+0x148>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	08db      	lsrs	r3, r3, #3
 8004fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80050fc <I2C_DMAAbort+0x14c>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	0a1a      	lsrs	r2, r3, #8
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	00da      	lsls	r2, r3, #3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004ff6:	e00a      	b.n	800500e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800500c:	d0ea      	beq.n	8004fe4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501a:	2200      	movs	r2, #0
 800501c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	2200      	movs	r2, #0
 800502c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800503c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005050:	2200      	movs	r2, #0
 8005052:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005060:	2200      	movs	r2, #0
 8005062:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b60      	cmp	r3, #96	@ 0x60
 800507e:	d10e      	bne.n	800509e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2200      	movs	r2, #0
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	f7fe fe0c 	bl	8003cb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800509c:	e027      	b.n	80050ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050a4:	2b28      	cmp	r3, #40	@ 0x28
 80050a6:	d117      	bne.n	80050d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2228      	movs	r2, #40	@ 0x28
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050d6:	e007      	b.n	80050e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f7fc f9ef 	bl	80014cc <HAL_I2C_ErrorCallback>
}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000004 	.word	0x20000004
 80050fc:	14f8b589 	.word	0x14f8b589

08005100 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	08db      	lsrs	r3, r3, #3
 8005112:	4a13      	ldr	r2, [pc, #76]	@ (8005160 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	0a1a      	lsrs	r2, r3, #8
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3b01      	subs	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d107      	bne.n	800513e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e008      	b.n	8005150 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800514c:	d0e9      	beq.n	8005122 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000004 	.word	0x20000004
 8005160:	14f8b589 	.word	0x14f8b589

08005164 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005174:	d103      	bne.n	800517e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800517c:	e007      	b.n	800518e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005186:	d102      	bne.n	800518e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2208      	movs	r2, #8
 800518c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800519c:	4b03      	ldr	r3, [pc, #12]	@ (80051ac <HAL_PWR_EnableBkUpAccess+0x14>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	420e0020 	.word	0x420e0020

080051b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e272      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8087 	beq.w	80052de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051d0:	4b92      	ldr	r3, [pc, #584]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d00c      	beq.n	80051f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051dc:	4b8f      	ldr	r3, [pc, #572]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d112      	bne.n	800520e <HAL_RCC_OscConfig+0x5e>
 80051e8:	4b8c      	ldr	r3, [pc, #560]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f4:	d10b      	bne.n	800520e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f6:	4b89      	ldr	r3, [pc, #548]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d06c      	beq.n	80052dc <HAL_RCC_OscConfig+0x12c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d168      	bne.n	80052dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e24c      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005216:	d106      	bne.n	8005226 <HAL_RCC_OscConfig+0x76>
 8005218:	4b80      	ldr	r3, [pc, #512]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7f      	ldr	r2, [pc, #508]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e02e      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_RCC_OscConfig+0x98>
 800522e:	4b7b      	ldr	r3, [pc, #492]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a7a      	ldr	r2, [pc, #488]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	4b78      	ldr	r3, [pc, #480]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a77      	ldr	r2, [pc, #476]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005240:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e01d      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0xbc>
 8005252:	4b72      	ldr	r3, [pc, #456]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a71      	ldr	r2, [pc, #452]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4b6f      	ldr	r3, [pc, #444]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a6e      	ldr	r2, [pc, #440]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 800526c:	4b6b      	ldr	r3, [pc, #428]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a6a      	ldr	r2, [pc, #424]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b68      	ldr	r3, [pc, #416]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a67      	ldr	r2, [pc, #412]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 800527e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005282:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528c:	f7fc fcc0 	bl	8001c10 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7fc fcbc 	bl	8001c10 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	@ 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e200      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a6:	4b5d      	ldr	r3, [pc, #372]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0xe4>
 80052b2:	e014      	b.n	80052de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fc fcac 	bl	8001c10 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fc fca8 	bl	8001c10 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	@ 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e1ec      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ce:	4b53      	ldr	r3, [pc, #332]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x10c>
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d063      	beq.n	80053b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ea:	4b4c      	ldr	r3, [pc, #304]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052f6:	4b49      	ldr	r3, [pc, #292]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d11c      	bne.n	800533c <HAL_RCC_OscConfig+0x18c>
 8005302:	4b46      	ldr	r3, [pc, #280]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d116      	bne.n	800533c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530e:	4b43      	ldr	r3, [pc, #268]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_RCC_OscConfig+0x176>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d001      	beq.n	8005326 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e1c0      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005326:	4b3d      	ldr	r3, [pc, #244]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4939      	ldr	r1, [pc, #228]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533a:	e03a      	b.n	80053b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d020      	beq.n	8005386 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005344:	4b36      	ldr	r3, [pc, #216]	@ (8005420 <HAL_RCC_OscConfig+0x270>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fc fc61 	bl	8001c10 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005352:	f7fc fc5d 	bl	8001c10 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e1a1      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005364:	4b2d      	ldr	r3, [pc, #180]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005370:	4b2a      	ldr	r3, [pc, #168]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4927      	ldr	r1, [pc, #156]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]
 8005384:	e015      	b.n	80053b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005386:	4b26      	ldr	r3, [pc, #152]	@ (8005420 <HAL_RCC_OscConfig+0x270>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538c:	f7fc fc40 	bl	8001c10 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005394:	f7fc fc3c 	bl	8001c10 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e180      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053a6:	4b1d      	ldr	r3, [pc, #116]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d03a      	beq.n	8005434 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d019      	beq.n	80053fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053c6:	4b17      	ldr	r3, [pc, #92]	@ (8005424 <HAL_RCC_OscConfig+0x274>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053cc:	f7fc fc20 	bl	8001c10 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d4:	f7fc fc1c 	bl	8001c10 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e160      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053e6:	4b0d      	ldr	r3, [pc, #52]	@ (800541c <HAL_RCC_OscConfig+0x26c>)
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053f2:	2001      	movs	r0, #1
 80053f4:	f000 face 	bl	8005994 <RCC_Delay>
 80053f8:	e01c      	b.n	8005434 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <HAL_RCC_OscConfig+0x274>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005400:	f7fc fc06 	bl	8001c10 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005406:	e00f      	b.n	8005428 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005408:	f7fc fc02 	bl	8001c10 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d908      	bls.n	8005428 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e146      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
 800541a:	bf00      	nop
 800541c:	40021000 	.word	0x40021000
 8005420:	42420000 	.word	0x42420000
 8005424:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005428:	4b92      	ldr	r3, [pc, #584]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e9      	bne.n	8005408 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80a6 	beq.w	800558e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005446:	4b8b      	ldr	r3, [pc, #556]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	4b88      	ldr	r3, [pc, #544]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	4a87      	ldr	r2, [pc, #540]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800545c:	61d3      	str	r3, [r2, #28]
 800545e:	4b85      	ldr	r3, [pc, #532]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546e:	4b82      	ldr	r3, [pc, #520]	@ (8005678 <HAL_RCC_OscConfig+0x4c8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d118      	bne.n	80054ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800547a:	4b7f      	ldr	r3, [pc, #508]	@ (8005678 <HAL_RCC_OscConfig+0x4c8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7e      	ldr	r2, [pc, #504]	@ (8005678 <HAL_RCC_OscConfig+0x4c8>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005486:	f7fc fbc3 	bl	8001c10 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548e:	f7fc fbbf 	bl	8001c10 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b64      	cmp	r3, #100	@ 0x64
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e103      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	4b75      	ldr	r3, [pc, #468]	@ (8005678 <HAL_RCC_OscConfig+0x4c8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d106      	bne.n	80054c2 <HAL_RCC_OscConfig+0x312>
 80054b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	6213      	str	r3, [r2, #32]
 80054c0:	e02d      	b.n	800551e <HAL_RCC_OscConfig+0x36e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x334>
 80054ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4a69      	ldr	r2, [pc, #420]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	6213      	str	r3, [r2, #32]
 80054d6:	4b67      	ldr	r3, [pc, #412]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4a66      	ldr	r2, [pc, #408]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054dc:	f023 0304 	bic.w	r3, r3, #4
 80054e0:	6213      	str	r3, [r2, #32]
 80054e2:	e01c      	b.n	800551e <HAL_RCC_OscConfig+0x36e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d10c      	bne.n	8005506 <HAL_RCC_OscConfig+0x356>
 80054ec:	4b61      	ldr	r3, [pc, #388]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	4a60      	ldr	r2, [pc, #384]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054f2:	f043 0304 	orr.w	r3, r3, #4
 80054f6:	6213      	str	r3, [r2, #32]
 80054f8:	4b5e      	ldr	r3, [pc, #376]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4a5d      	ldr	r2, [pc, #372]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	6213      	str	r3, [r2, #32]
 8005504:	e00b      	b.n	800551e <HAL_RCC_OscConfig+0x36e>
 8005506:	4b5b      	ldr	r3, [pc, #364]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	4a5a      	ldr	r2, [pc, #360]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6213      	str	r3, [r2, #32]
 8005512:	4b58      	ldr	r3, [pc, #352]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	4a57      	ldr	r2, [pc, #348]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005518:	f023 0304 	bic.w	r3, r3, #4
 800551c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d015      	beq.n	8005552 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005526:	f7fc fb73 	bl	8001c10 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fc fb6f 	bl	8001c10 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e0b1      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005544:	4b4b      	ldr	r3, [pc, #300]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0ee      	beq.n	800552e <HAL_RCC_OscConfig+0x37e>
 8005550:	e014      	b.n	800557c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005552:	f7fc fb5d 	bl	8001c10 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555a:	f7fc fb59 	bl	8001c10 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e09b      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005570:	4b40      	ldr	r3, [pc, #256]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ee      	bne.n	800555a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d105      	bne.n	800558e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005582:	4b3c      	ldr	r3, [pc, #240]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4a3b      	ldr	r2, [pc, #236]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800558c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8087 	beq.w	80056a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005598:	4b36      	ldr	r3, [pc, #216]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 030c 	and.w	r3, r3, #12
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d061      	beq.n	8005668 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d146      	bne.n	800563a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ac:	4b33      	ldr	r3, [pc, #204]	@ (800567c <HAL_RCC_OscConfig+0x4cc>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fc fb2d 	bl	8001c10 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ba:	f7fc fb29 	bl	8001c10 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e06d      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055cc:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d108      	bne.n	80055f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055e2:	4b24      	ldr	r3, [pc, #144]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	4921      	ldr	r1, [pc, #132]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a19      	ldr	r1, [r3, #32]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	430b      	orrs	r3, r1
 8005606:	491b      	ldr	r1, [pc, #108]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <HAL_RCC_OscConfig+0x4cc>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005612:	f7fc fafd 	bl	8001c10 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561a:	f7fc faf9 	bl	8001c10 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e03d      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800562c:	4b11      	ldr	r3, [pc, #68]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x46a>
 8005638:	e035      	b.n	80056a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <HAL_RCC_OscConfig+0x4cc>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fc fae6 	bl	8001c10 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005648:	f7fc fae2 	bl	8001c10 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e026      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800565a:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <HAL_RCC_OscConfig+0x4c4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x498>
 8005666:	e01e      	b.n	80056a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e019      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
 8005674:	40021000 	.word	0x40021000
 8005678:	40007000 	.word	0x40007000
 800567c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005680:	4b0b      	ldr	r3, [pc, #44]	@ (80056b0 <HAL_RCC_OscConfig+0x500>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	429a      	cmp	r2, r3
 8005692:	d106      	bne.n	80056a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d001      	beq.n	80056a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000

080056b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0d0      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d910      	bls.n	80056f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b67      	ldr	r3, [pc, #412]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 0207 	bic.w	r2, r3, #7
 80056de:	4965      	ldr	r1, [pc, #404]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e6:	4b63      	ldr	r3, [pc, #396]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0b8      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d020      	beq.n	8005746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005710:	4b59      	ldr	r3, [pc, #356]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a58      	ldr	r2, [pc, #352]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800571a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005728:	4b53      	ldr	r3, [pc, #332]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a52      	ldr	r2, [pc, #328]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800572e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005734:	4b50      	ldr	r3, [pc, #320]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	494d      	ldr	r1, [pc, #308]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d040      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	4b47      	ldr	r3, [pc, #284]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d115      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e07f      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005772:	4b41      	ldr	r3, [pc, #260]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e073      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005782:	4b3d      	ldr	r3, [pc, #244]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e06b      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005792:	4b39      	ldr	r3, [pc, #228]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f023 0203 	bic.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4936      	ldr	r1, [pc, #216]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a4:	f7fc fa34 	bl	8001c10 <HAL_GetTick>
 80057a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ac:	f7fc fa30 	bl	8001c10 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e053      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f003 020c 	and.w	r2, r3, #12
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d1eb      	bne.n	80057ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057d4:	4b27      	ldr	r3, [pc, #156]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d210      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e2:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f023 0207 	bic.w	r2, r3, #7
 80057ea:	4922      	ldr	r1, [pc, #136]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f2:	4b20      	ldr	r3, [pc, #128]	@ (8005874 <HAL_RCC_ClockConfig+0x1c0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e032      	b.n	800586a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005810:	4b19      	ldr	r3, [pc, #100]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4916      	ldr	r1, [pc, #88]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800581e:	4313      	orrs	r3, r2
 8005820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800582e:	4b12      	ldr	r3, [pc, #72]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	490e      	ldr	r1, [pc, #56]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	4313      	orrs	r3, r2
 8005840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005842:	f000 f821 	bl	8005888 <HAL_RCC_GetSysClockFreq>
 8005846:	4602      	mov	r2, r0
 8005848:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	490a      	ldr	r1, [pc, #40]	@ (800587c <HAL_RCC_ClockConfig+0x1c8>)
 8005854:	5ccb      	ldrb	r3, [r1, r3]
 8005856:	fa22 f303 	lsr.w	r3, r2, r3
 800585a:	4a09      	ldr	r2, [pc, #36]	@ (8005880 <HAL_RCC_ClockConfig+0x1cc>)
 800585c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800585e:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <HAL_RCC_ClockConfig+0x1d0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7fc f992 	bl	8001b8c <HAL_InitTick>

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40022000 	.word	0x40022000
 8005878:	40021000 	.word	0x40021000
 800587c:	08008588 	.word	0x08008588
 8005880:	20000004 	.word	0x20000004
 8005884:	20000008 	.word	0x20000008

08005888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	2300      	movs	r3, #0
 800589c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058a2:	4b1e      	ldr	r3, [pc, #120]	@ (800591c <HAL_RCC_GetSysClockFreq+0x94>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d002      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0x30>
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d003      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0x36>
 80058b6:	e027      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058b8:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x98>)
 80058ba:	613b      	str	r3, [r7, #16]
      break;
 80058bc:	e027      	b.n	800590e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	0c9b      	lsrs	r3, r3, #18
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80058c8:	5cd3      	ldrb	r3, [r2, r3]
 80058ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d010      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80058d6:	4b11      	ldr	r3, [pc, #68]	@ (800591c <HAL_RCC_GetSysClockFreq+0x94>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	0c5b      	lsrs	r3, r3, #17
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	4a11      	ldr	r2, [pc, #68]	@ (8005928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80058e2:	5cd3      	ldrb	r3, [r2, r3]
 80058e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x98>)
 80058ea:	fb03 f202 	mul.w	r2, r3, r2
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e004      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a0c      	ldr	r2, [pc, #48]	@ (800592c <HAL_RCC_GetSysClockFreq+0xa4>)
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	613b      	str	r3, [r7, #16]
      break;
 8005906:	e002      	b.n	800590e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005908:	4b05      	ldr	r3, [pc, #20]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x98>)
 800590a:	613b      	str	r3, [r7, #16]
      break;
 800590c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800590e:	693b      	ldr	r3, [r7, #16]
}
 8005910:	4618      	mov	r0, r3
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	007a1200 	.word	0x007a1200
 8005924:	080085a0 	.word	0x080085a0
 8005928:	080085b0 	.word	0x080085b0
 800592c:	003d0900 	.word	0x003d0900

08005930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005934:	4b02      	ldr	r3, [pc, #8]	@ (8005940 <HAL_RCC_GetHCLKFreq+0x10>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	20000004 	.word	0x20000004

08005944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005948:	f7ff fff2 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4903      	ldr	r1, [pc, #12]	@ (8005968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000
 8005968:	08008598 	.word	0x08008598

0800596c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005970:	f7ff ffde 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b05      	ldr	r3, [pc, #20]	@ (800598c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	0adb      	lsrs	r3, r3, #11
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4903      	ldr	r1, [pc, #12]	@ (8005990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40021000 	.word	0x40021000
 8005990:	08008598 	.word	0x08008598

08005994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800599c:	4b0a      	ldr	r3, [pc, #40]	@ (80059c8 <RCC_Delay+0x34>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0a      	ldr	r2, [pc, #40]	@ (80059cc <RCC_Delay+0x38>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0a5b      	lsrs	r3, r3, #9
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059b0:	bf00      	nop
  }
  while (Delay --);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1e5a      	subs	r2, r3, #1
 80059b6:	60fa      	str	r2, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f9      	bne.n	80059b0 <RCC_Delay+0x1c>
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	20000004 	.word	0x20000004
 80059cc:	10624dd3 	.word	0x10624dd3

080059d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d07d      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80059ec:	2300      	movs	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f0:	4b4f      	ldr	r3, [pc, #316]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10d      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	4a4b      	ldr	r2, [pc, #300]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a06:	61d3      	str	r3, [r2, #28]
 8005a08:	4b49      	ldr	r3, [pc, #292]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a18:	4b46      	ldr	r3, [pc, #280]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d118      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a24:	4b43      	ldr	r3, [pc, #268]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a42      	ldr	r2, [pc, #264]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a30:	f7fc f8ee 	bl	8001c10 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	e008      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a38:	f7fc f8ea 	bl	8001c10 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b64      	cmp	r3, #100	@ 0x64
 8005a44:	d901      	bls.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e06d      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a56:	4b36      	ldr	r3, [pc, #216]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02e      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d027      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a74:	4b2e      	ldr	r3, [pc, #184]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a84:	4b2c      	ldr	r3, [pc, #176]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a8a:	4a29      	ldr	r2, [pc, #164]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d014      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9a:	f7fc f8b9 	bl	8001c10 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fc f8b5 	bl	8001c10 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e036      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ee      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4917      	ldr	r1, [pc, #92]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d105      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005adc:	4b14      	ldr	r3, [pc, #80]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005af4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	490b      	ldr	r1, [pc, #44]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b12:	4b07      	ldr	r3, [pc, #28]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	4904      	ldr	r1, [pc, #16]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40007000 	.word	0x40007000
 8005b38:	42420440 	.word	0x42420440

08005b3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d00a      	beq.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	f200 808a 	bhi.w	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d045      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d075      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005b72:	e082      	b.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005b74:	4b46      	ldr	r3, [pc, #280]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005b7a:	4b45      	ldr	r3, [pc, #276]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d07b      	beq.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	0c9b      	lsrs	r3, r3, #18
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	4a41      	ldr	r2, [pc, #260]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005b90:	5cd3      	ldrb	r3, [r2, r3]
 8005b92:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d015      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	0c5b      	lsrs	r3, r3, #17
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005baa:	5cd3      	ldrb	r3, [r2, r3]
 8005bac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005bb8:	4a38      	ldr	r2, [pc, #224]	@ (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4a34      	ldr	r2, [pc, #208]	@ (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005be0:	d102      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	61bb      	str	r3, [r7, #24]
      break;
 8005be6:	e04a      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4a2d      	ldr	r2, [pc, #180]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	61bb      	str	r3, [r7, #24]
      break;
 8005bf6:	e042      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005bf8:	4b25      	ldr	r3, [pc, #148]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c08:	d108      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e01f      	b.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c26:	d109      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005c28:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005c34:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	e00f      	b.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c46:	d11c      	bne.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005c48:	4b11      	ldr	r3, [pc, #68]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d016      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005c54:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005c58:	61bb      	str	r3, [r7, #24]
      break;
 8005c5a:	e012      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005c5c:	e011      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005c5e:	f7ff fe85 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 8005c62:	4602      	mov	r2, r0
 8005c64:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	0b9b      	lsrs	r3, r3, #14
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	61bb      	str	r3, [r7, #24]
      break;
 8005c78:	e004      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e002      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005c82:	bf00      	nop
    }
  }
  return (frequency);
 8005c84:	69bb      	ldr	r3, [r7, #24]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40021000 	.word	0x40021000
 8005c94:	080085b4 	.word	0x080085b4
 8005c98:	080085c4 	.word	0x080085c4
 8005c9c:	007a1200 	.word	0x007a1200
 8005ca0:	003d0900 	.word	0x003d0900
 8005ca4:	aaaaaaab 	.word	0xaaaaaaab

08005ca8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e07a      	b.n	8005db4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	7c5b      	ldrb	r3, [r3, #17]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb fca4 	bl	800161c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f9be 	bl	800605c <HAL_RTC_WaitForSynchro>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e061      	b.n	8005db4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fa77 	bl	80061e4 <RTC_EnterInitMode>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e056      	b.n	8005db4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0207 	bic.w	r2, r2, #7
 8005d14:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005d1e:	4b27      	ldr	r3, [pc, #156]	@ (8005dbc <HAL_RTC_Init+0x114>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d22:	4a26      	ldr	r2, [pc, #152]	@ (8005dbc <HAL_RTC_Init+0x114>)
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005d2a:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <HAL_RTC_Init+0x114>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	4921      	ldr	r1, [pc, #132]	@ (8005dbc <HAL_RTC_Init+0x114>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d44:	d003      	beq.n	8005d4e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e00e      	b.n	8005d6c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7ff fef4 	bl	8005b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8005d54:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d104      	bne.n	8005d66 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e026      	b.n	8005db4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	0c1a      	lsrs	r2, r3, #16
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f002 020f 	and.w	r2, r2, #15
 8005d78:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	b292      	uxth	r2, r2
 8005d82:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa55 	bl	8006234 <RTC_ExitInitMode>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2204      	movs	r2, #4
 8005d94:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e00c      	b.n	8005db4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
  }
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40006c00 	.word	0x40006c00

08005dc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_RTC_SetTime+0x20>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e080      	b.n	8005ee6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	7c1b      	ldrb	r3, [r3, #16]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_RTC_SetTime+0x30>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e07a      	b.n	8005ee6 <HAL_RTC_SetTime+0x126>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005e0c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	4619      	mov	r1, r3
 8005e16:	460b      	mov	r3, r1
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	1a5b      	subs	r3, r3, r1
 8005e1c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005e1e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005e24:	4413      	add	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e01e      	b.n	8005e68 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fa28 	bl	8006284 <RTC_Bcd2ToByte>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005e3c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fa1d 	bl	8006284 <RTC_Bcd2ToByte>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4613      	mov	r3, r2
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005e56:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	789b      	ldrb	r3, [r3, #2]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fa11 	bl	8006284 <RTC_Bcd2ToByte>
 8005e62:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005e64:	4423      	add	r3, r4
 8005e66:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005e68:	6979      	ldr	r1, [r7, #20]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f953 	bl	8006116 <RTC_WriteTimeCounter>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e02f      	b.n	8005ee6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0205 	bic.w	r2, r2, #5
 8005e94:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f964 	bl	8006164 <RTC_ReadAlarmCounter>
 8005e9c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ea4:	d018      	beq.n	8005ed8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d214      	bcs.n	8005ed8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005eb4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005eb8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005eba:	6939      	ldr	r1, [r7, #16]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f96a 	bl	8006196 <RTC_WriteAlarmCounter>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2204      	movs	r2, #4
 8005ecc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e006      	b.n	8005ee6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd90      	pop	{r4, r7, pc}
	...

08005ef0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	2300      	movs	r3, #0
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_RTC_SetDate+0x24>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e097      	b.n	8006048 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	7c1b      	ldrb	r3, [r3, #16]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_RTC_SetDate+0x34>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e091      	b.n	8006048 <HAL_RTC_SetDate+0x158>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10c      	bne.n	8005f50 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	78da      	ldrb	r2, [r3, #3]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	785a      	ldrb	r2, [r3, #1]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	789a      	ldrb	r2, [r3, #2]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	739a      	strb	r2, [r3, #14]
 8005f4e:	e01a      	b.n	8005f86 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	78db      	ldrb	r3, [r3, #3]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 f995 	bl	8006284 <RTC_Bcd2ToByte>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f98c 	bl	8006284 <RTC_Bcd2ToByte>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	789b      	ldrb	r3, [r3, #2]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f983 	bl	8006284 <RTC_Bcd2ToByte>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	7bdb      	ldrb	r3, [r3, #15]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	7b59      	ldrb	r1, [r3, #13]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	7b9b      	ldrb	r3, [r3, #14]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f000 f993 	bl	80062c0 <RTC_WeekDayNum>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	7b1a      	ldrb	r2, [r3, #12]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f883 	bl	80060b6 <RTC_ReadTimeCounter>
 8005fb0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4a26      	ldr	r2, [pc, #152]	@ (8006050 <HAL_RTC_SetDate+0x160>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	0adb      	lsrs	r3, r3, #11
 8005fbc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b18      	cmp	r3, #24
 8005fc2:	d93a      	bls.n	800603a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	4a23      	ldr	r2, [pc, #140]	@ (8006054 <HAL_RTC_SetDate+0x164>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	4a22      	ldr	r2, [pc, #136]	@ (8006058 <HAL_RTC_SetDate+0x168>)
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005fda:	69f9      	ldr	r1, [r7, #28]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f89a 	bl	8006116 <RTC_WriteTimeCounter>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2204      	movs	r2, #4
 8005fec:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e027      	b.n	8006048 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f8b3 	bl	8006164 <RTC_ReadAlarmCounter>
 8005ffe:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006006:	d018      	beq.n	800603a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	429a      	cmp	r2, r3
 800600e:	d214      	bcs.n	800603a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8006016:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800601a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800601c:	69b9      	ldr	r1, [r7, #24]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f8b9 	bl	8006196 <RTC_WriteAlarmCounter>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2204      	movs	r2, #4
 800602e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e006      	b.n	8006048 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	91a2b3c5 	.word	0x91a2b3c5
 8006054:	aaaaaaab 	.word	0xaaaaaaab
 8006058:	00015180 	.word	0x00015180

0800605c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e01d      	b.n	80060ae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0208 	bic.w	r2, r2, #8
 8006080:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006082:	f7fb fdc5 	bl	8001c10 <HAL_GetTick>
 8006086:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006088:	e009      	b.n	800609e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800608a:	f7fb fdc1 	bl	8001c10 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006098:	d901      	bls.n	800609e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e007      	b.n	80060ae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0ee      	beq.n	800608a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b087      	sub	sp, #28
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	827b      	strh	r3, [r7, #18]
 80060c2:	2300      	movs	r3, #0
 80060c4:	823b      	strh	r3, [r7, #16]
 80060c6:	2300      	movs	r3, #0
 80060c8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80060e6:	8a7a      	ldrh	r2, [r7, #18]
 80060e8:	8a3b      	ldrh	r3, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d008      	beq.n	8006100 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80060ee:	8a3b      	ldrh	r3, [r7, #16]
 80060f0:	041a      	lsls	r2, r3, #16
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e004      	b.n	800610a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006100:	8a7b      	ldrh	r3, [r7, #18]
 8006102:	041a      	lsls	r2, r3, #16
 8006104:	89fb      	ldrh	r3, [r7, #14]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800610a:	697b      	ldr	r3, [r7, #20]
}
 800610c:	4618      	mov	r0, r3
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f85d 	bl	80061e4 <RTC_EnterInitMode>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e011      	b.n	800615a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	0c12      	lsrs	r2, r2, #16
 800613e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	b292      	uxth	r2, r2
 8006148:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f872 	bl	8006234 <RTC_ExitInitMode>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	81fb      	strh	r3, [r7, #14]
 8006170:	2300      	movs	r3, #0
 8006172:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006184:	89fb      	ldrh	r3, [r7, #14]
 8006186:	041a      	lsls	r2, r3, #16
 8006188:	89bb      	ldrh	r3, [r7, #12]
 800618a:	4313      	orrs	r3, r2
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr

08006196 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f81d 	bl	80061e4 <RTC_EnterInitMode>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	e011      	b.n	80061da <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	0c12      	lsrs	r2, r2, #16
 80061be:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	b292      	uxth	r2, r2
 80061c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f832 	bl	8006234 <RTC_ExitInitMode>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80061f0:	f7fb fd0e 	bl	8001c10 <HAL_GetTick>
 80061f4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80061f6:	e009      	b.n	800620c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80061f8:	f7fb fd0a 	bl	8001c10 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006206:	d901      	bls.n	800620c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e00f      	b.n	800622c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ee      	beq.n	80061f8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0210 	orr.w	r2, r2, #16
 8006228:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0210 	bic.w	r2, r2, #16
 800624e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006250:	f7fb fcde 	bl	8001c10 <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006256:	e009      	b.n	800626c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006258:	f7fb fcda 	bl	8001c10 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006266:	d901      	bls.n	800626c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e007      	b.n	800627c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0ee      	beq.n	8006258 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	091b      	lsrs	r3, r3, #4
 8006296:	b2db      	uxtb	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	b2db      	uxtb	r3, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
	...

080062c0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
 80062cc:	4613      	mov	r3, r2
 80062ce:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60bb      	str	r3, [r7, #8]
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80062de:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d82d      	bhi.n	8006342 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	4613      	mov	r3, r2
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	4413      	add	r3, r2
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	4a2c      	ldr	r2, [pc, #176]	@ (80063a4 <RTC_WeekDayNum+0xe4>)
 80062f4:	fba2 2303 	umull	r2, r3, r2, r3
 80062f8:	085a      	lsrs	r2, r3, #1
 80062fa:	78bb      	ldrb	r3, [r7, #2]
 80062fc:	441a      	add	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	441a      	add	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3b01      	subs	r3, #1
 8006306:	089b      	lsrs	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	3b01      	subs	r3, #1
 800630e:	4926      	ldr	r1, [pc, #152]	@ (80063a8 <RTC_WeekDayNum+0xe8>)
 8006310:	fba1 1303 	umull	r1, r3, r1, r3
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	1ad2      	subs	r2, r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	3b01      	subs	r3, #1
 800631c:	4922      	ldr	r1, [pc, #136]	@ (80063a8 <RTC_WeekDayNum+0xe8>)
 800631e:	fba1 1303 	umull	r1, r3, r1, r3
 8006322:	09db      	lsrs	r3, r3, #7
 8006324:	4413      	add	r3, r2
 8006326:	1d1a      	adds	r2, r3, #4
 8006328:	4b20      	ldr	r3, [pc, #128]	@ (80063ac <RTC_WeekDayNum+0xec>)
 800632a:	fba3 1302 	umull	r1, r3, r3, r2
 800632e:	1ad1      	subs	r1, r2, r3
 8006330:	0849      	lsrs	r1, r1, #1
 8006332:	440b      	add	r3, r1
 8006334:	0899      	lsrs	r1, r3, #2
 8006336:	460b      	mov	r3, r1
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e029      	b.n	8006396 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	4613      	mov	r3, r2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	4a15      	ldr	r2, [pc, #84]	@ (80063a4 <RTC_WeekDayNum+0xe4>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	085a      	lsrs	r2, r3, #1
 8006356:	78bb      	ldrb	r3, [r7, #2]
 8006358:	441a      	add	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	441a      	add	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4910      	ldr	r1, [pc, #64]	@ (80063a8 <RTC_WeekDayNum+0xe8>)
 8006368:	fba1 1303 	umull	r1, r3, r1, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	490d      	ldr	r1, [pc, #52]	@ (80063a8 <RTC_WeekDayNum+0xe8>)
 8006374:	fba1 1303 	umull	r1, r3, r1, r3
 8006378:	09db      	lsrs	r3, r3, #7
 800637a:	4413      	add	r3, r2
 800637c:	1c9a      	adds	r2, r3, #2
 800637e:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <RTC_WeekDayNum+0xec>)
 8006380:	fba3 1302 	umull	r1, r3, r3, r2
 8006384:	1ad1      	subs	r1, r2, r3
 8006386:	0849      	lsrs	r1, r1, #1
 8006388:	440b      	add	r3, r1
 800638a:	0899      	lsrs	r1, r3, #2
 800638c:	460b      	mov	r3, r1
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	1a5b      	subs	r3, r3, r1
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	b2db      	uxtb	r3, r3
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr
 80063a4:	38e38e39 	.word	0x38e38e39
 80063a8:	51eb851f 	.word	0x51eb851f
 80063ac:	24924925 	.word	0x24924925

080063b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e041      	b.n	8006446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb face 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f000 fc6a 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	d001      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e03a      	b.n	80064de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a18      	ldr	r2, [pc, #96]	@ (80064e8 <HAL_TIM_Base_Start_IT+0x98>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00e      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x58>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006492:	d009      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x58>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a14      	ldr	r2, [pc, #80]	@ (80064ec <HAL_TIM_Base_Start_IT+0x9c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d004      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x58>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a13      	ldr	r2, [pc, #76]	@ (80064f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d111      	bne.n	80064cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d010      	beq.n	80064dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0201 	orr.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ca:	e007      	b.n	80064dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800

080064f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e041      	b.n	800658a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f839 	bl	8006592 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f000 fbc8 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_IC_Start_IT+0x1e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e013      	b.n	80065ea <HAL_TIM_IC_Start_IT+0x46>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_IC_Start_IT+0x2e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	e00b      	b.n	80065ea <HAL_TIM_IC_Start_IT+0x46>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d104      	bne.n	80065e2 <HAL_TIM_IC_Start_IT+0x3e>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	e003      	b.n	80065ea <HAL_TIM_IC_Start_IT+0x46>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <HAL_TIM_IC_Start_IT+0x58>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e013      	b.n	8006624 <HAL_TIM_IC_Start_IT+0x80>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d104      	bne.n	800660c <HAL_TIM_IC_Start_IT+0x68>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e00b      	b.n	8006624 <HAL_TIM_IC_Start_IT+0x80>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b08      	cmp	r3, #8
 8006610:	d104      	bne.n	800661c <HAL_TIM_IC_Start_IT+0x78>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e003      	b.n	8006624 <HAL_TIM_IC_Start_IT+0x80>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006622:	b2db      	uxtb	r3, r3
 8006624:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d102      	bne.n	8006632 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800662c:	7b7b      	ldrb	r3, [r7, #13]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d001      	beq.n	8006636 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e0b8      	b.n	80067a8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <HAL_TIM_IC_Start_IT+0xa2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006644:	e013      	b.n	800666e <HAL_TIM_IC_Start_IT+0xca>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b04      	cmp	r3, #4
 800664a:	d104      	bne.n	8006656 <HAL_TIM_IC_Start_IT+0xb2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006654:	e00b      	b.n	800666e <HAL_TIM_IC_Start_IT+0xca>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b08      	cmp	r3, #8
 800665a:	d104      	bne.n	8006666 <HAL_TIM_IC_Start_IT+0xc2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006664:	e003      	b.n	800666e <HAL_TIM_IC_Start_IT+0xca>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_TIM_IC_Start_IT+0xda>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800667c:	e013      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x102>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b04      	cmp	r3, #4
 8006682:	d104      	bne.n	800668e <HAL_TIM_IC_Start_IT+0xea>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800668c:	e00b      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x102>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d104      	bne.n	800669e <HAL_TIM_IC_Start_IT+0xfa>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800669c:	e003      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x102>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d841      	bhi.n	8006730 <HAL_TIM_IC_Start_IT+0x18c>
 80066ac:	a201      	add	r2, pc, #4	@ (adr r2, 80066b4 <HAL_TIM_IC_Start_IT+0x110>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	080066e9 	.word	0x080066e9
 80066b8:	08006731 	.word	0x08006731
 80066bc:	08006731 	.word	0x08006731
 80066c0:	08006731 	.word	0x08006731
 80066c4:	080066fb 	.word	0x080066fb
 80066c8:	08006731 	.word	0x08006731
 80066cc:	08006731 	.word	0x08006731
 80066d0:	08006731 	.word	0x08006731
 80066d4:	0800670d 	.word	0x0800670d
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006731 	.word	0x08006731
 80066e4:	0800671f 	.word	0x0800671f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0202 	orr.w	r2, r2, #2
 80066f6:	60da      	str	r2, [r3, #12]
      break;
 80066f8:	e01d      	b.n	8006736 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0204 	orr.w	r2, r2, #4
 8006708:	60da      	str	r2, [r3, #12]
      break;
 800670a:	e014      	b.n	8006736 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0208 	orr.w	r2, r2, #8
 800671a:	60da      	str	r2, [r3, #12]
      break;
 800671c:	e00b      	b.n	8006736 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0210 	orr.w	r2, r2, #16
 800672c:	60da      	str	r2, [r3, #12]
      break;
 800672e:	e002      	b.n	8006736 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
      break;
 8006734:	bf00      	nop
  }

  if (status == HAL_OK)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d134      	bne.n	80067a6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2201      	movs	r2, #1
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fcc4 	bl	80070d2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <HAL_TIM_IC_Start_IT+0x20c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00e      	beq.n	8006772 <HAL_TIM_IC_Start_IT+0x1ce>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675c:	d009      	beq.n	8006772 <HAL_TIM_IC_Start_IT+0x1ce>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a14      	ldr	r2, [pc, #80]	@ (80067b4 <HAL_TIM_IC_Start_IT+0x210>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_TIM_IC_Start_IT+0x1ce>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a12      	ldr	r2, [pc, #72]	@ (80067b8 <HAL_TIM_IC_Start_IT+0x214>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d111      	bne.n	8006796 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b06      	cmp	r3, #6
 8006782:	d010      	beq.n	80067a6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006794:	e007      	b.n	80067a6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40000400 	.word	0x40000400
 80067b8:	40000800 	.word	0x40000800

080067bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d122      	bne.n	8006818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d11b      	bne.n	8006818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0202 	mvn.w	r2, #2
 80067e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fa fe8e 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 8006804:	e005      	b.n	8006812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa43 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fa49 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b04      	cmp	r3, #4
 8006824:	d122      	bne.n	800686c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b04      	cmp	r3, #4
 8006832:	d11b      	bne.n	800686c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0204 	mvn.w	r2, #4
 800683c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fa fe64 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 8006858:	e005      	b.n	8006866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa19 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa1f 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b08      	cmp	r3, #8
 8006878:	d122      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d11b      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0208 	mvn.w	r2, #8
 8006890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2204      	movs	r2, #4
 8006896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fa fe3a 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9ef 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f9f5 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d122      	bne.n	8006914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b10      	cmp	r3, #16
 80068da:	d11b      	bne.n	8006914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0210 	mvn.w	r2, #16
 80068e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2208      	movs	r2, #8
 80068ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fa fe10 	bl	8001520 <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f9c5 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f9cb 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	d10e      	bne.n	8006940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d107      	bne.n	8006940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0201 	mvn.w	r2, #1
 8006938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fa fe06 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694a:	2b80      	cmp	r3, #128	@ 0x80
 800694c:	d10e      	bne.n	800696c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006958:	2b80      	cmp	r3, #128	@ 0x80
 800695a:	d107      	bne.n	800696c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fc3f 	bl	80071ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006976:	2b40      	cmp	r3, #64	@ 0x40
 8006978:	d10e      	bne.n	8006998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b40      	cmp	r3, #64	@ 0x40
 8006986:	d107      	bne.n	8006998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f98f 	bl	8006cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d10e      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d107      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0220 	mvn.w	r2, #32
 80069bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fc0a 	bl	80071d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c4:	bf00      	nop
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e088      	b.n	8006afc <HAL_TIM_IC_ConfigChannel+0x130>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d11b      	bne.n	8006a30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006a08:	f000 f9c0 	bl	8006d8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 020c 	bic.w	r2, r2, #12
 8006a1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	619a      	str	r2, [r3, #24]
 8006a2e:	e060      	b.n	8006af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d11c      	bne.n	8006a70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006a46:	f000 fa29 	bl	8006e9c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6999      	ldr	r1, [r3, #24]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	021a      	lsls	r2, r3, #8
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	619a      	str	r2, [r3, #24]
 8006a6e:	e040      	b.n	8006af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d11b      	bne.n	8006aae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006a86:	f000 fa74 	bl	8006f72 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 020c 	bic.w	r2, r2, #12
 8006a98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69d9      	ldr	r1, [r3, #28]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	61da      	str	r2, [r3, #28]
 8006aac:	e021      	b.n	8006af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	d11c      	bne.n	8006aee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006ac4:	f000 fa90 	bl	8006fe8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69da      	ldr	r2, [r3, #28]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ad6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69d9      	ldr	r1, [r3, #28]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	021a      	lsls	r2, r3, #8
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	61da      	str	r2, [r3, #28]
 8006aec:	e001      	b.n	8006af2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIM_ConfigClockSource+0x1c>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e0b4      	b.n	8006c8a <HAL_TIM_ConfigClockSource+0x186>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b58:	d03e      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b5e:	f200 8087 	bhi.w	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b66:	f000 8086 	beq.w	8006c76 <HAL_TIM_ConfigClockSource+0x172>
 8006b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b6e:	d87f      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b70:	2b70      	cmp	r3, #112	@ 0x70
 8006b72:	d01a      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0xa6>
 8006b74:	2b70      	cmp	r3, #112	@ 0x70
 8006b76:	d87b      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b78:	2b60      	cmp	r3, #96	@ 0x60
 8006b7a:	d050      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x11a>
 8006b7c:	2b60      	cmp	r3, #96	@ 0x60
 8006b7e:	d877      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b80:	2b50      	cmp	r3, #80	@ 0x50
 8006b82:	d03c      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0xfa>
 8006b84:	2b50      	cmp	r3, #80	@ 0x50
 8006b86:	d873      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	d058      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x13a>
 8006b8c:	2b40      	cmp	r3, #64	@ 0x40
 8006b8e:	d86f      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b90:	2b30      	cmp	r3, #48	@ 0x30
 8006b92:	d064      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006b94:	2b30      	cmp	r3, #48	@ 0x30
 8006b96:	d86b      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d060      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d867      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d05c      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d05a      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006ba8:	e062      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bba:	f000 fa6b 	bl	8007094 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	609a      	str	r2, [r3, #8]
      break;
 8006bd6:	e04f      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006be8:	f000 fa54 	bl	8007094 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bfa:	609a      	str	r2, [r3, #8]
      break;
 8006bfc:	e03c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f000 f918 	bl	8006e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2150      	movs	r1, #80	@ 0x50
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fa22 	bl	8007060 <TIM_ITRx_SetConfig>
      break;
 8006c1c:	e02c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f000 f972 	bl	8006f14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2160      	movs	r1, #96	@ 0x60
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fa12 	bl	8007060 <TIM_ITRx_SetConfig>
      break;
 8006c3c:	e01c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 f8f8 	bl	8006e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2140      	movs	r1, #64	@ 0x40
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fa02 	bl	8007060 <TIM_ITRx_SetConfig>
      break;
 8006c5c:	e00c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f000 f9f9 	bl	8007060 <TIM_ITRx_SetConfig>
      break;
 8006c6e:	e003      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
      break;
 8006c74:	e000      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a29      	ldr	r2, [pc, #164]	@ (8006d80 <TIM_Base_SetConfig+0xb8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <TIM_Base_SetConfig+0x30>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce6:	d007      	beq.n	8006cf8 <TIM_Base_SetConfig+0x30>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a26      	ldr	r2, [pc, #152]	@ (8006d84 <TIM_Base_SetConfig+0xbc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_Base_SetConfig+0x30>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a25      	ldr	r2, [pc, #148]	@ (8006d88 <TIM_Base_SetConfig+0xc0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d108      	bne.n	8006d0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d80 <TIM_Base_SetConfig+0xb8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0x62>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0x62>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a19      	ldr	r2, [pc, #100]	@ (8006d84 <TIM_Base_SetConfig+0xbc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0x62>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a18      	ldr	r2, [pc, #96]	@ (8006d88 <TIM_Base_SetConfig+0xc0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a07      	ldr	r2, [pc, #28]	@ (8006d80 <TIM_Base_SetConfig+0xb8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	615a      	str	r2, [r3, #20]
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800

08006d8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f023 0201 	bic.w	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e34 <TIM_TI1_SetConfig+0xa8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00b      	beq.n	8006dd2 <TIM_TI1_SetConfig+0x46>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc0:	d007      	beq.n	8006dd2 <TIM_TI1_SetConfig+0x46>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e38 <TIM_TI1_SetConfig+0xac>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d003      	beq.n	8006dd2 <TIM_TI1_SetConfig+0x46>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e3c <TIM_TI1_SetConfig+0xb0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d101      	bne.n	8006dd6 <TIM_TI1_SetConfig+0x4a>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <TIM_TI1_SetConfig+0x4c>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e003      	b.n	8006df6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f023 030a 	bic.w	r3, r3, #10
 8006e10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f003 030a 	and.w	r3, r3, #10
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800

08006e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0201 	bic.w	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 030a 	bic.w	r3, r3, #10
 8006e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	621a      	str	r2, [r3, #32]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr

08006e9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f023 0210 	bic.w	r2, r3, #16
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	031b      	lsls	r3, r3, #12
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006eee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	621a      	str	r2, [r3, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0210 	bic.w	r2, r3, #16
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	031b      	lsls	r3, r3, #12
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	621a      	str	r2, [r3, #32]
}
 8006f68:	bf00      	nop
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fc2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007014:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007026:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	031b      	lsls	r3, r3, #12
 800702c:	b29b      	uxth	r3, r3
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800703a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	031b      	lsls	r3, r3, #12
 8007040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007076:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	f043 0307 	orr.w	r3, r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	609a      	str	r2, [r3, #8]
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr

08007094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	021a      	lsls	r2, r3, #8
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	609a      	str	r2, [r3, #8]
}
 80070c8:	bf00      	nop
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b087      	sub	sp, #28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	2201      	movs	r2, #1
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	43db      	mvns	r3, r3
 80070f4:	401a      	ands	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a1a      	ldr	r2, [r3, #32]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	431a      	orrs	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	621a      	str	r2, [r3, #32]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr
	...

0800711c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007130:	2302      	movs	r3, #2
 8007132:	e046      	b.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a16      	ldr	r2, [pc, #88]	@ (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00e      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007180:	d009      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a12      	ldr	r2, [pc, #72]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d004      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a10      	ldr	r2, [pc, #64]	@ (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10c      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr
 80071cc:	40012c00 	.word	0x40012c00
 80071d0:	40000400 	.word	0x40000400
 80071d4:	40000800 	.word	0x40000800

080071d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr

080071ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e042      	b.n	8007294 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fa fc2a 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2224      	movs	r2, #36	@ 0x24
 800722c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800723e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f91d 	bl	8007480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	695a      	ldr	r2, [r3, #20]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	@ 0x28
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d16d      	bne.n	8007398 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_UART_Transmit+0x2c>
 80072c2:	88fb      	ldrh	r3, [r7, #6]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e066      	b.n	800739a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2221      	movs	r2, #33	@ 0x21
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072da:	f7fa fc99 	bl	8001c10 <HAL_GetTick>
 80072de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f4:	d108      	bne.n	8007308 <HAL_UART_Transmit+0x6c>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d104      	bne.n	8007308 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	e003      	b.n	8007310 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800730c:	2300      	movs	r3, #0
 800730e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007310:	e02a      	b.n	8007368 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2200      	movs	r2, #0
 800731a:	2180      	movs	r1, #128	@ 0x80
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f840 	bl	80073a2 <UART_WaitOnFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e036      	b.n	800739a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	3302      	adds	r3, #2
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	e007      	b.n	800735a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3301      	adds	r3, #1
 8007358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1cf      	bne.n	8007312 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2200      	movs	r2, #0
 800737a:	2140      	movs	r1, #64	@ 0x40
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f810 	bl	80073a2 <UART_WaitOnFlagUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e006      	b.n	800739a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b090      	sub	sp, #64	@ 0x40
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	4613      	mov	r3, r2
 80073b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b2:	e050      	b.n	8007456 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073ba:	d04c      	beq.n	8007456 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80073c2:	f7fa fc25 	bl	8001c10 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d241      	bcs.n	8007456 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	330c      	adds	r3, #12
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80073f4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e5      	bne.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3314      	adds	r3, #20
 800740c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	613b      	str	r3, [r7, #16]
   return(result);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3314      	adds	r3, #20
 8007424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007426:	623a      	str	r2, [r7, #32]
 8007428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	6a3a      	ldr	r2, [r7, #32]
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	61bb      	str	r3, [r7, #24]
   return(result);
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e00f      	b.n	8007476 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4013      	ands	r3, r2
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	bf0c      	ite	eq
 8007466:	2301      	moveq	r3, #1
 8007468:	2300      	movne	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	429a      	cmp	r2, r3
 8007472:	d09f      	beq.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3740      	adds	r7, #64	@ 0x40
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80074ba:	f023 030c 	bic.w	r3, r3, #12
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	430b      	orrs	r3, r1
 80074c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007594 <UART_SetConfig+0x114>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d103      	bne.n	80074f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074e8:	f7fe fa40 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	e002      	b.n	80074f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80074f0:	f7fe fa28 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 80074f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009a      	lsls	r2, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	4a22      	ldr	r2, [pc, #136]	@ (8007598 <UART_SetConfig+0x118>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	0119      	lsls	r1, r3, #4
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009a      	lsls	r2, r3, #2
 8007520:	441a      	add	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	fbb2 f2f3 	udiv	r2, r2, r3
 800752c:	4b1a      	ldr	r3, [pc, #104]	@ (8007598 <UART_SetConfig+0x118>)
 800752e:	fba3 0302 	umull	r0, r3, r3, r2
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	2064      	movs	r0, #100	@ 0x64
 8007536:	fb00 f303 	mul.w	r3, r0, r3
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	3332      	adds	r3, #50	@ 0x32
 8007540:	4a15      	ldr	r2, [pc, #84]	@ (8007598 <UART_SetConfig+0x118>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	095b      	lsrs	r3, r3, #5
 8007548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800754c:	4419      	add	r1, r3
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009a      	lsls	r2, r3, #2
 8007558:	441a      	add	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	fbb2 f2f3 	udiv	r2, r2, r3
 8007564:	4b0c      	ldr	r3, [pc, #48]	@ (8007598 <UART_SetConfig+0x118>)
 8007566:	fba3 0302 	umull	r0, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2064      	movs	r0, #100	@ 0x64
 800756e:	fb00 f303 	mul.w	r3, r0, r3
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	3332      	adds	r3, #50	@ 0x32
 8007578:	4a07      	ldr	r2, [pc, #28]	@ (8007598 <UART_SetConfig+0x118>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	f003 020f 	and.w	r2, r3, #15
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	440a      	add	r2, r1
 800758a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40013800 	.word	0x40013800
 8007598:	51eb851f 	.word	0x51eb851f

0800759c <std>:
 800759c:	2300      	movs	r3, #0
 800759e:	b510      	push	{r4, lr}
 80075a0:	4604      	mov	r4, r0
 80075a2:	e9c0 3300 	strd	r3, r3, [r0]
 80075a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075aa:	6083      	str	r3, [r0, #8]
 80075ac:	8181      	strh	r1, [r0, #12]
 80075ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80075b0:	81c2      	strh	r2, [r0, #14]
 80075b2:	6183      	str	r3, [r0, #24]
 80075b4:	4619      	mov	r1, r3
 80075b6:	2208      	movs	r2, #8
 80075b8:	305c      	adds	r0, #92	@ 0x5c
 80075ba:	f000 f921 	bl	8007800 <memset>
 80075be:	4b0d      	ldr	r3, [pc, #52]	@ (80075f4 <std+0x58>)
 80075c0:	6224      	str	r4, [r4, #32]
 80075c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80075c4:	4b0c      	ldr	r3, [pc, #48]	@ (80075f8 <std+0x5c>)
 80075c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075c8:	4b0c      	ldr	r3, [pc, #48]	@ (80075fc <std+0x60>)
 80075ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <std+0x64>)
 80075ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <std+0x68>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d006      	beq.n	80075e4 <std+0x48>
 80075d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075da:	4294      	cmp	r4, r2
 80075dc:	d002      	beq.n	80075e4 <std+0x48>
 80075de:	33d0      	adds	r3, #208	@ 0xd0
 80075e0:	429c      	cmp	r4, r3
 80075e2:	d105      	bne.n	80075f0 <std+0x54>
 80075e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ec:	f000 b93a 	b.w	8007864 <__retarget_lock_init_recursive>
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	bf00      	nop
 80075f4:	080080b5 	.word	0x080080b5
 80075f8:	080080d7 	.word	0x080080d7
 80075fc:	0800810f 	.word	0x0800810f
 8007600:	08008133 	.word	0x08008133
 8007604:	2000025c 	.word	0x2000025c

08007608 <stdio_exit_handler>:
 8007608:	4a02      	ldr	r2, [pc, #8]	@ (8007614 <stdio_exit_handler+0xc>)
 800760a:	4903      	ldr	r1, [pc, #12]	@ (8007618 <stdio_exit_handler+0x10>)
 800760c:	4803      	ldr	r0, [pc, #12]	@ (800761c <stdio_exit_handler+0x14>)
 800760e:	f000 b869 	b.w	80076e4 <_fwalk_sglue>
 8007612:	bf00      	nop
 8007614:	20000010 	.word	0x20000010
 8007618:	0800804d 	.word	0x0800804d
 800761c:	20000020 	.word	0x20000020

08007620 <cleanup_stdio>:
 8007620:	6841      	ldr	r1, [r0, #4]
 8007622:	4b0c      	ldr	r3, [pc, #48]	@ (8007654 <cleanup_stdio+0x34>)
 8007624:	b510      	push	{r4, lr}
 8007626:	4299      	cmp	r1, r3
 8007628:	4604      	mov	r4, r0
 800762a:	d001      	beq.n	8007630 <cleanup_stdio+0x10>
 800762c:	f000 fd0e 	bl	800804c <_fflush_r>
 8007630:	68a1      	ldr	r1, [r4, #8]
 8007632:	4b09      	ldr	r3, [pc, #36]	@ (8007658 <cleanup_stdio+0x38>)
 8007634:	4299      	cmp	r1, r3
 8007636:	d002      	beq.n	800763e <cleanup_stdio+0x1e>
 8007638:	4620      	mov	r0, r4
 800763a:	f000 fd07 	bl	800804c <_fflush_r>
 800763e:	68e1      	ldr	r1, [r4, #12]
 8007640:	4b06      	ldr	r3, [pc, #24]	@ (800765c <cleanup_stdio+0x3c>)
 8007642:	4299      	cmp	r1, r3
 8007644:	d004      	beq.n	8007650 <cleanup_stdio+0x30>
 8007646:	4620      	mov	r0, r4
 8007648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764c:	f000 bcfe 	b.w	800804c <_fflush_r>
 8007650:	bd10      	pop	{r4, pc}
 8007652:	bf00      	nop
 8007654:	2000025c 	.word	0x2000025c
 8007658:	200002c4 	.word	0x200002c4
 800765c:	2000032c 	.word	0x2000032c

08007660 <global_stdio_init.part.0>:
 8007660:	b510      	push	{r4, lr}
 8007662:	4b0b      	ldr	r3, [pc, #44]	@ (8007690 <global_stdio_init.part.0+0x30>)
 8007664:	4c0b      	ldr	r4, [pc, #44]	@ (8007694 <global_stdio_init.part.0+0x34>)
 8007666:	4a0c      	ldr	r2, [pc, #48]	@ (8007698 <global_stdio_init.part.0+0x38>)
 8007668:	4620      	mov	r0, r4
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	2104      	movs	r1, #4
 800766e:	2200      	movs	r2, #0
 8007670:	f7ff ff94 	bl	800759c <std>
 8007674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007678:	2201      	movs	r2, #1
 800767a:	2109      	movs	r1, #9
 800767c:	f7ff ff8e 	bl	800759c <std>
 8007680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007684:	2202      	movs	r2, #2
 8007686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768a:	2112      	movs	r1, #18
 800768c:	f7ff bf86 	b.w	800759c <std>
 8007690:	20000394 	.word	0x20000394
 8007694:	2000025c 	.word	0x2000025c
 8007698:	08007609 	.word	0x08007609

0800769c <__sfp_lock_acquire>:
 800769c:	4801      	ldr	r0, [pc, #4]	@ (80076a4 <__sfp_lock_acquire+0x8>)
 800769e:	f000 b8e2 	b.w	8007866 <__retarget_lock_acquire_recursive>
 80076a2:	bf00      	nop
 80076a4:	20000399 	.word	0x20000399

080076a8 <__sfp_lock_release>:
 80076a8:	4801      	ldr	r0, [pc, #4]	@ (80076b0 <__sfp_lock_release+0x8>)
 80076aa:	f000 b8dd 	b.w	8007868 <__retarget_lock_release_recursive>
 80076ae:	bf00      	nop
 80076b0:	20000399 	.word	0x20000399

080076b4 <__sinit>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	4604      	mov	r4, r0
 80076b8:	f7ff fff0 	bl	800769c <__sfp_lock_acquire>
 80076bc:	6a23      	ldr	r3, [r4, #32]
 80076be:	b11b      	cbz	r3, 80076c8 <__sinit+0x14>
 80076c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c4:	f7ff bff0 	b.w	80076a8 <__sfp_lock_release>
 80076c8:	4b04      	ldr	r3, [pc, #16]	@ (80076dc <__sinit+0x28>)
 80076ca:	6223      	str	r3, [r4, #32]
 80076cc:	4b04      	ldr	r3, [pc, #16]	@ (80076e0 <__sinit+0x2c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f5      	bne.n	80076c0 <__sinit+0xc>
 80076d4:	f7ff ffc4 	bl	8007660 <global_stdio_init.part.0>
 80076d8:	e7f2      	b.n	80076c0 <__sinit+0xc>
 80076da:	bf00      	nop
 80076dc:	08007621 	.word	0x08007621
 80076e0:	20000394 	.word	0x20000394

080076e4 <_fwalk_sglue>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	4607      	mov	r7, r0
 80076ea:	4688      	mov	r8, r1
 80076ec:	4614      	mov	r4, r2
 80076ee:	2600      	movs	r6, #0
 80076f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076f4:	f1b9 0901 	subs.w	r9, r9, #1
 80076f8:	d505      	bpl.n	8007706 <_fwalk_sglue+0x22>
 80076fa:	6824      	ldr	r4, [r4, #0]
 80076fc:	2c00      	cmp	r4, #0
 80076fe:	d1f7      	bne.n	80076f0 <_fwalk_sglue+0xc>
 8007700:	4630      	mov	r0, r6
 8007702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007706:	89ab      	ldrh	r3, [r5, #12]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d907      	bls.n	800771c <_fwalk_sglue+0x38>
 800770c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007710:	3301      	adds	r3, #1
 8007712:	d003      	beq.n	800771c <_fwalk_sglue+0x38>
 8007714:	4629      	mov	r1, r5
 8007716:	4638      	mov	r0, r7
 8007718:	47c0      	blx	r8
 800771a:	4306      	orrs	r6, r0
 800771c:	3568      	adds	r5, #104	@ 0x68
 800771e:	e7e9      	b.n	80076f4 <_fwalk_sglue+0x10>

08007720 <iprintf>:
 8007720:	b40f      	push	{r0, r1, r2, r3}
 8007722:	b507      	push	{r0, r1, r2, lr}
 8007724:	4906      	ldr	r1, [pc, #24]	@ (8007740 <iprintf+0x20>)
 8007726:	ab04      	add	r3, sp, #16
 8007728:	6808      	ldr	r0, [r1, #0]
 800772a:	f853 2b04 	ldr.w	r2, [r3], #4
 800772e:	6881      	ldr	r1, [r0, #8]
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	f000 f8c1 	bl	80078b8 <_vfiprintf_r>
 8007736:	b003      	add	sp, #12
 8007738:	f85d eb04 	ldr.w	lr, [sp], #4
 800773c:	b004      	add	sp, #16
 800773e:	4770      	bx	lr
 8007740:	2000001c 	.word	0x2000001c

08007744 <_puts_r>:
 8007744:	6a03      	ldr	r3, [r0, #32]
 8007746:	b570      	push	{r4, r5, r6, lr}
 8007748:	4605      	mov	r5, r0
 800774a:	460e      	mov	r6, r1
 800774c:	6884      	ldr	r4, [r0, #8]
 800774e:	b90b      	cbnz	r3, 8007754 <_puts_r+0x10>
 8007750:	f7ff ffb0 	bl	80076b4 <__sinit>
 8007754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007756:	07db      	lsls	r3, r3, #31
 8007758:	d405      	bmi.n	8007766 <_puts_r+0x22>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	0598      	lsls	r0, r3, #22
 800775e:	d402      	bmi.n	8007766 <_puts_r+0x22>
 8007760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007762:	f000 f880 	bl	8007866 <__retarget_lock_acquire_recursive>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	0719      	lsls	r1, r3, #28
 800776a:	d502      	bpl.n	8007772 <_puts_r+0x2e>
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d135      	bne.n	80077de <_puts_r+0x9a>
 8007772:	4621      	mov	r1, r4
 8007774:	4628      	mov	r0, r5
 8007776:	f000 fd1f 	bl	80081b8 <__swsetup_r>
 800777a:	b380      	cbz	r0, 80077de <_puts_r+0x9a>
 800777c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007782:	07da      	lsls	r2, r3, #31
 8007784:	d405      	bmi.n	8007792 <_puts_r+0x4e>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	059b      	lsls	r3, r3, #22
 800778a:	d402      	bmi.n	8007792 <_puts_r+0x4e>
 800778c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800778e:	f000 f86b 	bl	8007868 <__retarget_lock_release_recursive>
 8007792:	4628      	mov	r0, r5
 8007794:	bd70      	pop	{r4, r5, r6, pc}
 8007796:	2b00      	cmp	r3, #0
 8007798:	da04      	bge.n	80077a4 <_puts_r+0x60>
 800779a:	69a2      	ldr	r2, [r4, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	dc17      	bgt.n	80077d0 <_puts_r+0x8c>
 80077a0:	290a      	cmp	r1, #10
 80077a2:	d015      	beq.n	80077d0 <_puts_r+0x8c>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	6022      	str	r2, [r4, #0]
 80077aa:	7019      	strb	r1, [r3, #0]
 80077ac:	68a3      	ldr	r3, [r4, #8]
 80077ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077b2:	3b01      	subs	r3, #1
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	2900      	cmp	r1, #0
 80077b8:	d1ed      	bne.n	8007796 <_puts_r+0x52>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da11      	bge.n	80077e2 <_puts_r+0x9e>
 80077be:	4622      	mov	r2, r4
 80077c0:	210a      	movs	r1, #10
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fcb9 	bl	800813a <__swbuf_r>
 80077c8:	3001      	adds	r0, #1
 80077ca:	d0d7      	beq.n	800777c <_puts_r+0x38>
 80077cc:	250a      	movs	r5, #10
 80077ce:	e7d7      	b.n	8007780 <_puts_r+0x3c>
 80077d0:	4622      	mov	r2, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 fcb1 	bl	800813a <__swbuf_r>
 80077d8:	3001      	adds	r0, #1
 80077da:	d1e7      	bne.n	80077ac <_puts_r+0x68>
 80077dc:	e7ce      	b.n	800777c <_puts_r+0x38>
 80077de:	3e01      	subs	r6, #1
 80077e0:	e7e4      	b.n	80077ac <_puts_r+0x68>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	6022      	str	r2, [r4, #0]
 80077e8:	220a      	movs	r2, #10
 80077ea:	701a      	strb	r2, [r3, #0]
 80077ec:	e7ee      	b.n	80077cc <_puts_r+0x88>
	...

080077f0 <puts>:
 80077f0:	4b02      	ldr	r3, [pc, #8]	@ (80077fc <puts+0xc>)
 80077f2:	4601      	mov	r1, r0
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	f7ff bfa5 	b.w	8007744 <_puts_r>
 80077fa:	bf00      	nop
 80077fc:	2000001c 	.word	0x2000001c

08007800 <memset>:
 8007800:	4603      	mov	r3, r0
 8007802:	4402      	add	r2, r0
 8007804:	4293      	cmp	r3, r2
 8007806:	d100      	bne.n	800780a <memset+0xa>
 8007808:	4770      	bx	lr
 800780a:	f803 1b01 	strb.w	r1, [r3], #1
 800780e:	e7f9      	b.n	8007804 <memset+0x4>

08007810 <__errno>:
 8007810:	4b01      	ldr	r3, [pc, #4]	@ (8007818 <__errno+0x8>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	2000001c 	.word	0x2000001c

0800781c <__libc_init_array>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	2600      	movs	r6, #0
 8007820:	4d0c      	ldr	r5, [pc, #48]	@ (8007854 <__libc_init_array+0x38>)
 8007822:	4c0d      	ldr	r4, [pc, #52]	@ (8007858 <__libc_init_array+0x3c>)
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	42a6      	cmp	r6, r4
 800782a:	d109      	bne.n	8007840 <__libc_init_array+0x24>
 800782c:	f000 fe4a 	bl	80084c4 <_init>
 8007830:	2600      	movs	r6, #0
 8007832:	4d0a      	ldr	r5, [pc, #40]	@ (800785c <__libc_init_array+0x40>)
 8007834:	4c0a      	ldr	r4, [pc, #40]	@ (8007860 <__libc_init_array+0x44>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	42a6      	cmp	r6, r4
 800783c:	d105      	bne.n	800784a <__libc_init_array+0x2e>
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	f855 3b04 	ldr.w	r3, [r5], #4
 8007844:	4798      	blx	r3
 8007846:	3601      	adds	r6, #1
 8007848:	e7ee      	b.n	8007828 <__libc_init_array+0xc>
 800784a:	f855 3b04 	ldr.w	r3, [r5], #4
 800784e:	4798      	blx	r3
 8007850:	3601      	adds	r6, #1
 8007852:	e7f2      	b.n	800783a <__libc_init_array+0x1e>
 8007854:	080085fc 	.word	0x080085fc
 8007858:	080085fc 	.word	0x080085fc
 800785c:	080085fc 	.word	0x080085fc
 8007860:	08008600 	.word	0x08008600

08007864 <__retarget_lock_init_recursive>:
 8007864:	4770      	bx	lr

08007866 <__retarget_lock_acquire_recursive>:
 8007866:	4770      	bx	lr

08007868 <__retarget_lock_release_recursive>:
 8007868:	4770      	bx	lr

0800786a <__sfputc_r>:
 800786a:	6893      	ldr	r3, [r2, #8]
 800786c:	b410      	push	{r4}
 800786e:	3b01      	subs	r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	6093      	str	r3, [r2, #8]
 8007874:	da07      	bge.n	8007886 <__sfputc_r+0x1c>
 8007876:	6994      	ldr	r4, [r2, #24]
 8007878:	42a3      	cmp	r3, r4
 800787a:	db01      	blt.n	8007880 <__sfputc_r+0x16>
 800787c:	290a      	cmp	r1, #10
 800787e:	d102      	bne.n	8007886 <__sfputc_r+0x1c>
 8007880:	bc10      	pop	{r4}
 8007882:	f000 bc5a 	b.w	800813a <__swbuf_r>
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	1c58      	adds	r0, r3, #1
 800788a:	6010      	str	r0, [r2, #0]
 800788c:	7019      	strb	r1, [r3, #0]
 800788e:	4608      	mov	r0, r1
 8007890:	bc10      	pop	{r4}
 8007892:	4770      	bx	lr

08007894 <__sfputs_r>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	4606      	mov	r6, r0
 8007898:	460f      	mov	r7, r1
 800789a:	4614      	mov	r4, r2
 800789c:	18d5      	adds	r5, r2, r3
 800789e:	42ac      	cmp	r4, r5
 80078a0:	d101      	bne.n	80078a6 <__sfputs_r+0x12>
 80078a2:	2000      	movs	r0, #0
 80078a4:	e007      	b.n	80078b6 <__sfputs_r+0x22>
 80078a6:	463a      	mov	r2, r7
 80078a8:	4630      	mov	r0, r6
 80078aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ae:	f7ff ffdc 	bl	800786a <__sfputc_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d1f3      	bne.n	800789e <__sfputs_r+0xa>
 80078b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078b8 <_vfiprintf_r>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	460d      	mov	r5, r1
 80078be:	4614      	mov	r4, r2
 80078c0:	4698      	mov	r8, r3
 80078c2:	4606      	mov	r6, r0
 80078c4:	b09d      	sub	sp, #116	@ 0x74
 80078c6:	b118      	cbz	r0, 80078d0 <_vfiprintf_r+0x18>
 80078c8:	6a03      	ldr	r3, [r0, #32]
 80078ca:	b90b      	cbnz	r3, 80078d0 <_vfiprintf_r+0x18>
 80078cc:	f7ff fef2 	bl	80076b4 <__sinit>
 80078d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078d2:	07d9      	lsls	r1, r3, #31
 80078d4:	d405      	bmi.n	80078e2 <_vfiprintf_r+0x2a>
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	059a      	lsls	r2, r3, #22
 80078da:	d402      	bmi.n	80078e2 <_vfiprintf_r+0x2a>
 80078dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078de:	f7ff ffc2 	bl	8007866 <__retarget_lock_acquire_recursive>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	071b      	lsls	r3, r3, #28
 80078e6:	d501      	bpl.n	80078ec <_vfiprintf_r+0x34>
 80078e8:	692b      	ldr	r3, [r5, #16]
 80078ea:	b99b      	cbnz	r3, 8007914 <_vfiprintf_r+0x5c>
 80078ec:	4629      	mov	r1, r5
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 fc62 	bl	80081b8 <__swsetup_r>
 80078f4:	b170      	cbz	r0, 8007914 <_vfiprintf_r+0x5c>
 80078f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078f8:	07dc      	lsls	r4, r3, #31
 80078fa:	d504      	bpl.n	8007906 <_vfiprintf_r+0x4e>
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007900:	b01d      	add	sp, #116	@ 0x74
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	0598      	lsls	r0, r3, #22
 800790a:	d4f7      	bmi.n	80078fc <_vfiprintf_r+0x44>
 800790c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800790e:	f7ff ffab 	bl	8007868 <__retarget_lock_release_recursive>
 8007912:	e7f3      	b.n	80078fc <_vfiprintf_r+0x44>
 8007914:	2300      	movs	r3, #0
 8007916:	9309      	str	r3, [sp, #36]	@ 0x24
 8007918:	2320      	movs	r3, #32
 800791a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800791e:	2330      	movs	r3, #48	@ 0x30
 8007920:	f04f 0901 	mov.w	r9, #1
 8007924:	f8cd 800c 	str.w	r8, [sp, #12]
 8007928:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007ad4 <_vfiprintf_r+0x21c>
 800792c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007930:	4623      	mov	r3, r4
 8007932:	469a      	mov	sl, r3
 8007934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007938:	b10a      	cbz	r2, 800793e <_vfiprintf_r+0x86>
 800793a:	2a25      	cmp	r2, #37	@ 0x25
 800793c:	d1f9      	bne.n	8007932 <_vfiprintf_r+0x7a>
 800793e:	ebba 0b04 	subs.w	fp, sl, r4
 8007942:	d00b      	beq.n	800795c <_vfiprintf_r+0xa4>
 8007944:	465b      	mov	r3, fp
 8007946:	4622      	mov	r2, r4
 8007948:	4629      	mov	r1, r5
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ffa2 	bl	8007894 <__sfputs_r>
 8007950:	3001      	adds	r0, #1
 8007952:	f000 80a7 	beq.w	8007aa4 <_vfiprintf_r+0x1ec>
 8007956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007958:	445a      	add	r2, fp
 800795a:	9209      	str	r2, [sp, #36]	@ 0x24
 800795c:	f89a 3000 	ldrb.w	r3, [sl]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 809f 	beq.w	8007aa4 <_vfiprintf_r+0x1ec>
 8007966:	2300      	movs	r3, #0
 8007968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800796c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007970:	f10a 0a01 	add.w	sl, sl, #1
 8007974:	9304      	str	r3, [sp, #16]
 8007976:	9307      	str	r3, [sp, #28]
 8007978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800797c:	931a      	str	r3, [sp, #104]	@ 0x68
 800797e:	4654      	mov	r4, sl
 8007980:	2205      	movs	r2, #5
 8007982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007986:	4853      	ldr	r0, [pc, #332]	@ (8007ad4 <_vfiprintf_r+0x21c>)
 8007988:	f000 fd46 	bl	8008418 <memchr>
 800798c:	9a04      	ldr	r2, [sp, #16]
 800798e:	b9d8      	cbnz	r0, 80079c8 <_vfiprintf_r+0x110>
 8007990:	06d1      	lsls	r1, r2, #27
 8007992:	bf44      	itt	mi
 8007994:	2320      	movmi	r3, #32
 8007996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800799a:	0713      	lsls	r3, r2, #28
 800799c:	bf44      	itt	mi
 800799e:	232b      	movmi	r3, #43	@ 0x2b
 80079a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079a4:	f89a 3000 	ldrb.w	r3, [sl]
 80079a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079aa:	d015      	beq.n	80079d8 <_vfiprintf_r+0x120>
 80079ac:	4654      	mov	r4, sl
 80079ae:	2000      	movs	r0, #0
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	9a07      	ldr	r2, [sp, #28]
 80079b6:	4621      	mov	r1, r4
 80079b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079bc:	3b30      	subs	r3, #48	@ 0x30
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d94b      	bls.n	8007a5a <_vfiprintf_r+0x1a2>
 80079c2:	b1b0      	cbz	r0, 80079f2 <_vfiprintf_r+0x13a>
 80079c4:	9207      	str	r2, [sp, #28]
 80079c6:	e014      	b.n	80079f2 <_vfiprintf_r+0x13a>
 80079c8:	eba0 0308 	sub.w	r3, r0, r8
 80079cc:	fa09 f303 	lsl.w	r3, r9, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	46a2      	mov	sl, r4
 80079d4:	9304      	str	r3, [sp, #16]
 80079d6:	e7d2      	b.n	800797e <_vfiprintf_r+0xc6>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	1d19      	adds	r1, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9103      	str	r1, [sp, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfbb      	ittet	lt
 80079e4:	425b      	neglt	r3, r3
 80079e6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ea:	9307      	strge	r3, [sp, #28]
 80079ec:	9307      	strlt	r3, [sp, #28]
 80079ee:	bfb8      	it	lt
 80079f0:	9204      	strlt	r2, [sp, #16]
 80079f2:	7823      	ldrb	r3, [r4, #0]
 80079f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f6:	d10a      	bne.n	8007a0e <_vfiprintf_r+0x156>
 80079f8:	7863      	ldrb	r3, [r4, #1]
 80079fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fc:	d132      	bne.n	8007a64 <_vfiprintf_r+0x1ac>
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	3402      	adds	r4, #2
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	9203      	str	r2, [sp, #12]
 8007a08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007ad8 <_vfiprintf_r+0x220>
 8007a12:	2203      	movs	r2, #3
 8007a14:	4650      	mov	r0, sl
 8007a16:	7821      	ldrb	r1, [r4, #0]
 8007a18:	f000 fcfe 	bl	8008418 <memchr>
 8007a1c:	b138      	cbz	r0, 8007a2e <_vfiprintf_r+0x176>
 8007a1e:	2240      	movs	r2, #64	@ 0x40
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	eba0 000a 	sub.w	r0, r0, sl
 8007a26:	4082      	lsls	r2, r0
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	3401      	adds	r4, #1
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a32:	2206      	movs	r2, #6
 8007a34:	4829      	ldr	r0, [pc, #164]	@ (8007adc <_vfiprintf_r+0x224>)
 8007a36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a3a:	f000 fced 	bl	8008418 <memchr>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d03f      	beq.n	8007ac2 <_vfiprintf_r+0x20a>
 8007a42:	4b27      	ldr	r3, [pc, #156]	@ (8007ae0 <_vfiprintf_r+0x228>)
 8007a44:	bb1b      	cbnz	r3, 8007a8e <_vfiprintf_r+0x1d6>
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	3307      	adds	r3, #7
 8007a4a:	f023 0307 	bic.w	r3, r3, #7
 8007a4e:	3308      	adds	r3, #8
 8007a50:	9303      	str	r3, [sp, #12]
 8007a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a54:	443b      	add	r3, r7
 8007a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a58:	e76a      	b.n	8007930 <_vfiprintf_r+0x78>
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a62:	e7a8      	b.n	80079b6 <_vfiprintf_r+0xfe>
 8007a64:	2300      	movs	r3, #0
 8007a66:	f04f 0c0a 	mov.w	ip, #10
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	3401      	adds	r4, #1
 8007a6e:	9305      	str	r3, [sp, #20]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a76:	3a30      	subs	r2, #48	@ 0x30
 8007a78:	2a09      	cmp	r2, #9
 8007a7a:	d903      	bls.n	8007a84 <_vfiprintf_r+0x1cc>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0c6      	beq.n	8007a0e <_vfiprintf_r+0x156>
 8007a80:	9105      	str	r1, [sp, #20]
 8007a82:	e7c4      	b.n	8007a0e <_vfiprintf_r+0x156>
 8007a84:	4604      	mov	r4, r0
 8007a86:	2301      	movs	r3, #1
 8007a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a8c:	e7f0      	b.n	8007a70 <_vfiprintf_r+0x1b8>
 8007a8e:	ab03      	add	r3, sp, #12
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	462a      	mov	r2, r5
 8007a94:	4630      	mov	r0, r6
 8007a96:	4b13      	ldr	r3, [pc, #76]	@ (8007ae4 <_vfiprintf_r+0x22c>)
 8007a98:	a904      	add	r1, sp, #16
 8007a9a:	f3af 8000 	nop.w
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	1c78      	adds	r0, r7, #1
 8007aa2:	d1d6      	bne.n	8007a52 <_vfiprintf_r+0x19a>
 8007aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aa6:	07d9      	lsls	r1, r3, #31
 8007aa8:	d405      	bmi.n	8007ab6 <_vfiprintf_r+0x1fe>
 8007aaa:	89ab      	ldrh	r3, [r5, #12]
 8007aac:	059a      	lsls	r2, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_vfiprintf_r+0x1fe>
 8007ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ab2:	f7ff fed9 	bl	8007868 <__retarget_lock_release_recursive>
 8007ab6:	89ab      	ldrh	r3, [r5, #12]
 8007ab8:	065b      	lsls	r3, r3, #25
 8007aba:	f53f af1f 	bmi.w	80078fc <_vfiprintf_r+0x44>
 8007abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ac0:	e71e      	b.n	8007900 <_vfiprintf_r+0x48>
 8007ac2:	ab03      	add	r3, sp, #12
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	462a      	mov	r2, r5
 8007ac8:	4630      	mov	r0, r6
 8007aca:	4b06      	ldr	r3, [pc, #24]	@ (8007ae4 <_vfiprintf_r+0x22c>)
 8007acc:	a904      	add	r1, sp, #16
 8007ace:	f000 f91f 	bl	8007d10 <_printf_i>
 8007ad2:	e7e4      	b.n	8007a9e <_vfiprintf_r+0x1e6>
 8007ad4:	080085c6 	.word	0x080085c6
 8007ad8:	080085cc 	.word	0x080085cc
 8007adc:	080085d0 	.word	0x080085d0
 8007ae0:	00000000 	.word	0x00000000
 8007ae4:	08007895 	.word	0x08007895

08007ae8 <sbrk_aligned>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4e0f      	ldr	r6, [pc, #60]	@ (8007b28 <sbrk_aligned+0x40>)
 8007aec:	460c      	mov	r4, r1
 8007aee:	6831      	ldr	r1, [r6, #0]
 8007af0:	4605      	mov	r5, r0
 8007af2:	b911      	cbnz	r1, 8007afa <sbrk_aligned+0x12>
 8007af4:	f000 fc4c 	bl	8008390 <_sbrk_r>
 8007af8:	6030      	str	r0, [r6, #0]
 8007afa:	4621      	mov	r1, r4
 8007afc:	4628      	mov	r0, r5
 8007afe:	f000 fc47 	bl	8008390 <_sbrk_r>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	d103      	bne.n	8007b0e <sbrk_aligned+0x26>
 8007b06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	bd70      	pop	{r4, r5, r6, pc}
 8007b0e:	1cc4      	adds	r4, r0, #3
 8007b10:	f024 0403 	bic.w	r4, r4, #3
 8007b14:	42a0      	cmp	r0, r4
 8007b16:	d0f8      	beq.n	8007b0a <sbrk_aligned+0x22>
 8007b18:	1a21      	subs	r1, r4, r0
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 fc38 	bl	8008390 <_sbrk_r>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d1f2      	bne.n	8007b0a <sbrk_aligned+0x22>
 8007b24:	e7ef      	b.n	8007b06 <sbrk_aligned+0x1e>
 8007b26:	bf00      	nop
 8007b28:	2000039c 	.word	0x2000039c

08007b2c <_malloc_r>:
 8007b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b30:	1ccd      	adds	r5, r1, #3
 8007b32:	f025 0503 	bic.w	r5, r5, #3
 8007b36:	3508      	adds	r5, #8
 8007b38:	2d0c      	cmp	r5, #12
 8007b3a:	bf38      	it	cc
 8007b3c:	250c      	movcc	r5, #12
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	4606      	mov	r6, r0
 8007b42:	db01      	blt.n	8007b48 <_malloc_r+0x1c>
 8007b44:	42a9      	cmp	r1, r5
 8007b46:	d904      	bls.n	8007b52 <_malloc_r+0x26>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	6033      	str	r3, [r6, #0]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c28 <_malloc_r+0xfc>
 8007b56:	f000 faa1 	bl	800809c <__malloc_lock>
 8007b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b5e:	461c      	mov	r4, r3
 8007b60:	bb44      	cbnz	r4, 8007bb4 <_malloc_r+0x88>
 8007b62:	4629      	mov	r1, r5
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff ffbf 	bl	8007ae8 <sbrk_aligned>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	d158      	bne.n	8007c22 <_malloc_r+0xf6>
 8007b70:	f8d8 4000 	ldr.w	r4, [r8]
 8007b74:	4627      	mov	r7, r4
 8007b76:	2f00      	cmp	r7, #0
 8007b78:	d143      	bne.n	8007c02 <_malloc_r+0xd6>
 8007b7a:	2c00      	cmp	r4, #0
 8007b7c:	d04b      	beq.n	8007c16 <_malloc_r+0xea>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	4639      	mov	r1, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	eb04 0903 	add.w	r9, r4, r3
 8007b88:	f000 fc02 	bl	8008390 <_sbrk_r>
 8007b8c:	4581      	cmp	r9, r0
 8007b8e:	d142      	bne.n	8007c16 <_malloc_r+0xea>
 8007b90:	6821      	ldr	r1, [r4, #0]
 8007b92:	4630      	mov	r0, r6
 8007b94:	1a6d      	subs	r5, r5, r1
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7ff ffa6 	bl	8007ae8 <sbrk_aligned>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d03a      	beq.n	8007c16 <_malloc_r+0xea>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	442b      	add	r3, r5
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	bb62      	cbnz	r2, 8007c08 <_malloc_r+0xdc>
 8007bae:	f8c8 7000 	str.w	r7, [r8]
 8007bb2:	e00f      	b.n	8007bd4 <_malloc_r+0xa8>
 8007bb4:	6822      	ldr	r2, [r4, #0]
 8007bb6:	1b52      	subs	r2, r2, r5
 8007bb8:	d420      	bmi.n	8007bfc <_malloc_r+0xd0>
 8007bba:	2a0b      	cmp	r2, #11
 8007bbc:	d917      	bls.n	8007bee <_malloc_r+0xc2>
 8007bbe:	1961      	adds	r1, r4, r5
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	6025      	str	r5, [r4, #0]
 8007bc4:	bf18      	it	ne
 8007bc6:	6059      	strne	r1, [r3, #4]
 8007bc8:	6863      	ldr	r3, [r4, #4]
 8007bca:	bf08      	it	eq
 8007bcc:	f8c8 1000 	streq.w	r1, [r8]
 8007bd0:	5162      	str	r2, [r4, r5]
 8007bd2:	604b      	str	r3, [r1, #4]
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 fa67 	bl	80080a8 <__malloc_unlock>
 8007bda:	f104 000b 	add.w	r0, r4, #11
 8007bde:	1d23      	adds	r3, r4, #4
 8007be0:	f020 0007 	bic.w	r0, r0, #7
 8007be4:	1ac2      	subs	r2, r0, r3
 8007be6:	bf1c      	itt	ne
 8007be8:	1a1b      	subne	r3, r3, r0
 8007bea:	50a3      	strne	r3, [r4, r2]
 8007bec:	e7af      	b.n	8007b4e <_malloc_r+0x22>
 8007bee:	6862      	ldr	r2, [r4, #4]
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	bf0c      	ite	eq
 8007bf4:	f8c8 2000 	streq.w	r2, [r8]
 8007bf8:	605a      	strne	r2, [r3, #4]
 8007bfa:	e7eb      	b.n	8007bd4 <_malloc_r+0xa8>
 8007bfc:	4623      	mov	r3, r4
 8007bfe:	6864      	ldr	r4, [r4, #4]
 8007c00:	e7ae      	b.n	8007b60 <_malloc_r+0x34>
 8007c02:	463c      	mov	r4, r7
 8007c04:	687f      	ldr	r7, [r7, #4]
 8007c06:	e7b6      	b.n	8007b76 <_malloc_r+0x4a>
 8007c08:	461a      	mov	r2, r3
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d1fb      	bne.n	8007c08 <_malloc_r+0xdc>
 8007c10:	2300      	movs	r3, #0
 8007c12:	6053      	str	r3, [r2, #4]
 8007c14:	e7de      	b.n	8007bd4 <_malloc_r+0xa8>
 8007c16:	230c      	movs	r3, #12
 8007c18:	4630      	mov	r0, r6
 8007c1a:	6033      	str	r3, [r6, #0]
 8007c1c:	f000 fa44 	bl	80080a8 <__malloc_unlock>
 8007c20:	e794      	b.n	8007b4c <_malloc_r+0x20>
 8007c22:	6005      	str	r5, [r0, #0]
 8007c24:	e7d6      	b.n	8007bd4 <_malloc_r+0xa8>
 8007c26:	bf00      	nop
 8007c28:	200003a0 	.word	0x200003a0

08007c2c <_printf_common>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	4616      	mov	r6, r2
 8007c32:	4698      	mov	r8, r3
 8007c34:	688a      	ldr	r2, [r1, #8]
 8007c36:	690b      	ldr	r3, [r1, #16]
 8007c38:	4607      	mov	r7, r0
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bfb8      	it	lt
 8007c3e:	4613      	movlt	r3, r2
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c46:	460c      	mov	r4, r1
 8007c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c4c:	b10a      	cbz	r2, 8007c52 <_printf_common+0x26>
 8007c4e:	3301      	adds	r3, #1
 8007c50:	6033      	str	r3, [r6, #0]
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	0699      	lsls	r1, r3, #26
 8007c56:	bf42      	ittt	mi
 8007c58:	6833      	ldrmi	r3, [r6, #0]
 8007c5a:	3302      	addmi	r3, #2
 8007c5c:	6033      	strmi	r3, [r6, #0]
 8007c5e:	6825      	ldr	r5, [r4, #0]
 8007c60:	f015 0506 	ands.w	r5, r5, #6
 8007c64:	d106      	bne.n	8007c74 <_printf_common+0x48>
 8007c66:	f104 0a19 	add.w	sl, r4, #25
 8007c6a:	68e3      	ldr	r3, [r4, #12]
 8007c6c:	6832      	ldr	r2, [r6, #0]
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	dc2b      	bgt.n	8007ccc <_printf_common+0xa0>
 8007c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c78:	6822      	ldr	r2, [r4, #0]
 8007c7a:	3b00      	subs	r3, #0
 8007c7c:	bf18      	it	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	0692      	lsls	r2, r2, #26
 8007c82:	d430      	bmi.n	8007ce6 <_printf_common+0xba>
 8007c84:	4641      	mov	r1, r8
 8007c86:	4638      	mov	r0, r7
 8007c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c8c:	47c8      	blx	r9
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d023      	beq.n	8007cda <_printf_common+0xae>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	6922      	ldr	r2, [r4, #16]
 8007c96:	f003 0306 	and.w	r3, r3, #6
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	bf14      	ite	ne
 8007c9e:	2500      	movne	r5, #0
 8007ca0:	6833      	ldreq	r3, [r6, #0]
 8007ca2:	f04f 0600 	mov.w	r6, #0
 8007ca6:	bf08      	it	eq
 8007ca8:	68e5      	ldreq	r5, [r4, #12]
 8007caa:	f104 041a 	add.w	r4, r4, #26
 8007cae:	bf08      	it	eq
 8007cb0:	1aed      	subeq	r5, r5, r3
 8007cb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007cb6:	bf08      	it	eq
 8007cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	bfc4      	itt	gt
 8007cc0:	1a9b      	subgt	r3, r3, r2
 8007cc2:	18ed      	addgt	r5, r5, r3
 8007cc4:	42b5      	cmp	r5, r6
 8007cc6:	d11a      	bne.n	8007cfe <_printf_common+0xd2>
 8007cc8:	2000      	movs	r0, #0
 8007cca:	e008      	b.n	8007cde <_printf_common+0xb2>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4652      	mov	r2, sl
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	47c8      	blx	r9
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d103      	bne.n	8007ce2 <_printf_common+0xb6>
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	3501      	adds	r5, #1
 8007ce4:	e7c1      	b.n	8007c6a <_printf_common+0x3e>
 8007ce6:	2030      	movs	r0, #48	@ 0x30
 8007ce8:	18e1      	adds	r1, r4, r3
 8007cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cf4:	4422      	add	r2, r4
 8007cf6:	3302      	adds	r3, #2
 8007cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cfc:	e7c2      	b.n	8007c84 <_printf_common+0x58>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4622      	mov	r2, r4
 8007d02:	4641      	mov	r1, r8
 8007d04:	4638      	mov	r0, r7
 8007d06:	47c8      	blx	r9
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d0e6      	beq.n	8007cda <_printf_common+0xae>
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	e7d9      	b.n	8007cc4 <_printf_common+0x98>

08007d10 <_printf_i>:
 8007d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	7e0f      	ldrb	r7, [r1, #24]
 8007d16:	4691      	mov	r9, r2
 8007d18:	2f78      	cmp	r7, #120	@ 0x78
 8007d1a:	4680      	mov	r8, r0
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	469a      	mov	sl, r3
 8007d20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d26:	d807      	bhi.n	8007d38 <_printf_i+0x28>
 8007d28:	2f62      	cmp	r7, #98	@ 0x62
 8007d2a:	d80a      	bhi.n	8007d42 <_printf_i+0x32>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f000 80d1 	beq.w	8007ed4 <_printf_i+0x1c4>
 8007d32:	2f58      	cmp	r7, #88	@ 0x58
 8007d34:	f000 80b8 	beq.w	8007ea8 <_printf_i+0x198>
 8007d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d40:	e03a      	b.n	8007db8 <_printf_i+0xa8>
 8007d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d46:	2b15      	cmp	r3, #21
 8007d48:	d8f6      	bhi.n	8007d38 <_printf_i+0x28>
 8007d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d50 <_printf_i+0x40>)
 8007d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007dbd 	.word	0x08007dbd
 8007d58:	08007d39 	.word	0x08007d39
 8007d5c:	08007d39 	.word	0x08007d39
 8007d60:	08007d39 	.word	0x08007d39
 8007d64:	08007d39 	.word	0x08007d39
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007d39 	.word	0x08007d39
 8007d70:	08007d39 	.word	0x08007d39
 8007d74:	08007d39 	.word	0x08007d39
 8007d78:	08007d39 	.word	0x08007d39
 8007d7c:	08007ebb 	.word	0x08007ebb
 8007d80:	08007de7 	.word	0x08007de7
 8007d84:	08007e75 	.word	0x08007e75
 8007d88:	08007d39 	.word	0x08007d39
 8007d8c:	08007d39 	.word	0x08007d39
 8007d90:	08007edd 	.word	0x08007edd
 8007d94:	08007d39 	.word	0x08007d39
 8007d98:	08007de7 	.word	0x08007de7
 8007d9c:	08007d39 	.word	0x08007d39
 8007da0:	08007d39 	.word	0x08007d39
 8007da4:	08007e7d 	.word	0x08007e7d
 8007da8:	6833      	ldr	r3, [r6, #0]
 8007daa:	1d1a      	adds	r2, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6032      	str	r2, [r6, #0]
 8007db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007db8:	2301      	movs	r3, #1
 8007dba:	e09c      	b.n	8007ef6 <_printf_i+0x1e6>
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	6031      	str	r1, [r6, #0]
 8007dc4:	0606      	lsls	r6, r0, #24
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0xbc>
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <_printf_i+0xc4>
 8007dcc:	0645      	lsls	r5, r0, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0xb8>
 8007dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	da03      	bge.n	8007de0 <_printf_i+0xd0>
 8007dd8:	232d      	movs	r3, #45	@ 0x2d
 8007dda:	426d      	negs	r5, r5
 8007ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de0:	230a      	movs	r3, #10
 8007de2:	4858      	ldr	r0, [pc, #352]	@ (8007f44 <_printf_i+0x234>)
 8007de4:	e011      	b.n	8007e0a <_printf_i+0xfa>
 8007de6:	6821      	ldr	r1, [r4, #0]
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	0608      	lsls	r0, r1, #24
 8007dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8007df0:	d402      	bmi.n	8007df8 <_printf_i+0xe8>
 8007df2:	0649      	lsls	r1, r1, #25
 8007df4:	bf48      	it	mi
 8007df6:	b2ad      	uxthmi	r5, r5
 8007df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dfa:	6033      	str	r3, [r6, #0]
 8007dfc:	bf14      	ite	ne
 8007dfe:	230a      	movne	r3, #10
 8007e00:	2308      	moveq	r3, #8
 8007e02:	4850      	ldr	r0, [pc, #320]	@ (8007f44 <_printf_i+0x234>)
 8007e04:	2100      	movs	r1, #0
 8007e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e0a:	6866      	ldr	r6, [r4, #4]
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	60a6      	str	r6, [r4, #8]
 8007e10:	db05      	blt.n	8007e1e <_printf_i+0x10e>
 8007e12:	6821      	ldr	r1, [r4, #0]
 8007e14:	432e      	orrs	r6, r5
 8007e16:	f021 0104 	bic.w	r1, r1, #4
 8007e1a:	6021      	str	r1, [r4, #0]
 8007e1c:	d04b      	beq.n	8007eb6 <_printf_i+0x1a6>
 8007e1e:	4616      	mov	r6, r2
 8007e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e24:	fb03 5711 	mls	r7, r3, r1, r5
 8007e28:	5dc7      	ldrb	r7, [r0, r7]
 8007e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e2e:	462f      	mov	r7, r5
 8007e30:	42bb      	cmp	r3, r7
 8007e32:	460d      	mov	r5, r1
 8007e34:	d9f4      	bls.n	8007e20 <_printf_i+0x110>
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d10b      	bne.n	8007e52 <_printf_i+0x142>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	07df      	lsls	r7, r3, #31
 8007e3e:	d508      	bpl.n	8007e52 <_printf_i+0x142>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	6861      	ldr	r1, [r4, #4]
 8007e44:	4299      	cmp	r1, r3
 8007e46:	bfde      	ittt	le
 8007e48:	2330      	movle	r3, #48	@ 0x30
 8007e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e4e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e52:	1b92      	subs	r2, r2, r6
 8007e54:	6122      	str	r2, [r4, #16]
 8007e56:	464b      	mov	r3, r9
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f8cd a000 	str.w	sl, [sp]
 8007e60:	aa03      	add	r2, sp, #12
 8007e62:	f7ff fee3 	bl	8007c2c <_printf_common>
 8007e66:	3001      	adds	r0, #1
 8007e68:	d14a      	bne.n	8007f00 <_printf_i+0x1f0>
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e6e:	b004      	add	sp, #16
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	f043 0320 	orr.w	r3, r3, #32
 8007e7a:	6023      	str	r3, [r4, #0]
 8007e7c:	2778      	movs	r7, #120	@ 0x78
 8007e7e:	4832      	ldr	r0, [pc, #200]	@ (8007f48 <_printf_i+0x238>)
 8007e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	6831      	ldr	r1, [r6, #0]
 8007e88:	061f      	lsls	r7, r3, #24
 8007e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e8e:	d402      	bmi.n	8007e96 <_printf_i+0x186>
 8007e90:	065f      	lsls	r7, r3, #25
 8007e92:	bf48      	it	mi
 8007e94:	b2ad      	uxthmi	r5, r5
 8007e96:	6031      	str	r1, [r6, #0]
 8007e98:	07d9      	lsls	r1, r3, #31
 8007e9a:	bf44      	itt	mi
 8007e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea0:	6023      	strmi	r3, [r4, #0]
 8007ea2:	b11d      	cbz	r5, 8007eac <_printf_i+0x19c>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	e7ad      	b.n	8007e04 <_printf_i+0xf4>
 8007ea8:	4826      	ldr	r0, [pc, #152]	@ (8007f44 <_printf_i+0x234>)
 8007eaa:	e7e9      	b.n	8007e80 <_printf_i+0x170>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	f023 0320 	bic.w	r3, r3, #32
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	e7f6      	b.n	8007ea4 <_printf_i+0x194>
 8007eb6:	4616      	mov	r6, r2
 8007eb8:	e7bd      	b.n	8007e36 <_printf_i+0x126>
 8007eba:	6833      	ldr	r3, [r6, #0]
 8007ebc:	6825      	ldr	r5, [r4, #0]
 8007ebe:	1d18      	adds	r0, r3, #4
 8007ec0:	6961      	ldr	r1, [r4, #20]
 8007ec2:	6030      	str	r0, [r6, #0]
 8007ec4:	062e      	lsls	r6, r5, #24
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	d501      	bpl.n	8007ece <_printf_i+0x1be>
 8007eca:	6019      	str	r1, [r3, #0]
 8007ecc:	e002      	b.n	8007ed4 <_printf_i+0x1c4>
 8007ece:	0668      	lsls	r0, r5, #25
 8007ed0:	d5fb      	bpl.n	8007eca <_printf_i+0x1ba>
 8007ed2:	8019      	strh	r1, [r3, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4616      	mov	r6, r2
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	e7bc      	b.n	8007e56 <_printf_i+0x146>
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	2100      	movs	r1, #0
 8007ee0:	1d1a      	adds	r2, r3, #4
 8007ee2:	6032      	str	r2, [r6, #0]
 8007ee4:	681e      	ldr	r6, [r3, #0]
 8007ee6:	6862      	ldr	r2, [r4, #4]
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f000 fa95 	bl	8008418 <memchr>
 8007eee:	b108      	cbz	r0, 8007ef4 <_printf_i+0x1e4>
 8007ef0:	1b80      	subs	r0, r0, r6
 8007ef2:	6060      	str	r0, [r4, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007efe:	e7aa      	b.n	8007e56 <_printf_i+0x146>
 8007f00:	4632      	mov	r2, r6
 8007f02:	4649      	mov	r1, r9
 8007f04:	4640      	mov	r0, r8
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	47d0      	blx	sl
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d0ad      	beq.n	8007e6a <_printf_i+0x15a>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	079b      	lsls	r3, r3, #30
 8007f12:	d413      	bmi.n	8007f3c <_printf_i+0x22c>
 8007f14:	68e0      	ldr	r0, [r4, #12]
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	4298      	cmp	r0, r3
 8007f1a:	bfb8      	it	lt
 8007f1c:	4618      	movlt	r0, r3
 8007f1e:	e7a6      	b.n	8007e6e <_printf_i+0x15e>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4632      	mov	r2, r6
 8007f24:	4649      	mov	r1, r9
 8007f26:	4640      	mov	r0, r8
 8007f28:	47d0      	blx	sl
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d09d      	beq.n	8007e6a <_printf_i+0x15a>
 8007f2e:	3501      	adds	r5, #1
 8007f30:	68e3      	ldr	r3, [r4, #12]
 8007f32:	9903      	ldr	r1, [sp, #12]
 8007f34:	1a5b      	subs	r3, r3, r1
 8007f36:	42ab      	cmp	r3, r5
 8007f38:	dcf2      	bgt.n	8007f20 <_printf_i+0x210>
 8007f3a:	e7eb      	b.n	8007f14 <_printf_i+0x204>
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	f104 0619 	add.w	r6, r4, #25
 8007f42:	e7f5      	b.n	8007f30 <_printf_i+0x220>
 8007f44:	080085d7 	.word	0x080085d7
 8007f48:	080085e8 	.word	0x080085e8

08007f4c <__sflush_r>:
 8007f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	0716      	lsls	r6, r2, #28
 8007f54:	4605      	mov	r5, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	d454      	bmi.n	8008004 <__sflush_r+0xb8>
 8007f5a:	684b      	ldr	r3, [r1, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc02      	bgt.n	8007f66 <__sflush_r+0x1a>
 8007f60:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dd48      	ble.n	8007ff8 <__sflush_r+0xac>
 8007f66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	d045      	beq.n	8007ff8 <__sflush_r+0xac>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f72:	682f      	ldr	r7, [r5, #0]
 8007f74:	6a21      	ldr	r1, [r4, #32]
 8007f76:	602b      	str	r3, [r5, #0]
 8007f78:	d030      	beq.n	8007fdc <__sflush_r+0x90>
 8007f7a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	0759      	lsls	r1, r3, #29
 8007f80:	d505      	bpl.n	8007f8e <__sflush_r+0x42>
 8007f82:	6863      	ldr	r3, [r4, #4]
 8007f84:	1ad2      	subs	r2, r2, r3
 8007f86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f88:	b10b      	cbz	r3, 8007f8e <__sflush_r+0x42>
 8007f8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f8c:	1ad2      	subs	r2, r2, r3
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4628      	mov	r0, r5
 8007f92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f94:	6a21      	ldr	r1, [r4, #32]
 8007f96:	47b0      	blx	r6
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	d106      	bne.n	8007fac <__sflush_r+0x60>
 8007f9e:	6829      	ldr	r1, [r5, #0]
 8007fa0:	291d      	cmp	r1, #29
 8007fa2:	d82b      	bhi.n	8007ffc <__sflush_r+0xb0>
 8007fa4:	4a28      	ldr	r2, [pc, #160]	@ (8008048 <__sflush_r+0xfc>)
 8007fa6:	40ca      	lsrs	r2, r1
 8007fa8:	07d6      	lsls	r6, r2, #31
 8007faa:	d527      	bpl.n	8007ffc <__sflush_r+0xb0>
 8007fac:	2200      	movs	r2, #0
 8007fae:	6062      	str	r2, [r4, #4]
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	04d9      	lsls	r1, r3, #19
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	d504      	bpl.n	8007fc2 <__sflush_r+0x76>
 8007fb8:	1c42      	adds	r2, r0, #1
 8007fba:	d101      	bne.n	8007fc0 <__sflush_r+0x74>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b903      	cbnz	r3, 8007fc2 <__sflush_r+0x76>
 8007fc0:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fc4:	602f      	str	r7, [r5, #0]
 8007fc6:	b1b9      	cbz	r1, 8007ff8 <__sflush_r+0xac>
 8007fc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fcc:	4299      	cmp	r1, r3
 8007fce:	d002      	beq.n	8007fd6 <__sflush_r+0x8a>
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 fa2f 	bl	8008434 <_free_r>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fda:	e00d      	b.n	8007ff8 <__sflush_r+0xac>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4628      	mov	r0, r5
 8007fe0:	47b0      	blx	r6
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	1c50      	adds	r0, r2, #1
 8007fe6:	d1c9      	bne.n	8007f7c <__sflush_r+0x30>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0c6      	beq.n	8007f7c <__sflush_r+0x30>
 8007fee:	2b1d      	cmp	r3, #29
 8007ff0:	d001      	beq.n	8007ff6 <__sflush_r+0xaa>
 8007ff2:	2b16      	cmp	r3, #22
 8007ff4:	d11d      	bne.n	8008032 <__sflush_r+0xe6>
 8007ff6:	602f      	str	r7, [r5, #0]
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	e021      	b.n	8008040 <__sflush_r+0xf4>
 8007ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008000:	b21b      	sxth	r3, r3
 8008002:	e01a      	b.n	800803a <__sflush_r+0xee>
 8008004:	690f      	ldr	r7, [r1, #16]
 8008006:	2f00      	cmp	r7, #0
 8008008:	d0f6      	beq.n	8007ff8 <__sflush_r+0xac>
 800800a:	0793      	lsls	r3, r2, #30
 800800c:	bf18      	it	ne
 800800e:	2300      	movne	r3, #0
 8008010:	680e      	ldr	r6, [r1, #0]
 8008012:	bf08      	it	eq
 8008014:	694b      	ldreq	r3, [r1, #20]
 8008016:	1bf6      	subs	r6, r6, r7
 8008018:	600f      	str	r7, [r1, #0]
 800801a:	608b      	str	r3, [r1, #8]
 800801c:	2e00      	cmp	r6, #0
 800801e:	ddeb      	ble.n	8007ff8 <__sflush_r+0xac>
 8008020:	4633      	mov	r3, r6
 8008022:	463a      	mov	r2, r7
 8008024:	4628      	mov	r0, r5
 8008026:	6a21      	ldr	r1, [r4, #32]
 8008028:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800802c:	47e0      	blx	ip
 800802e:	2800      	cmp	r0, #0
 8008030:	dc07      	bgt.n	8008042 <__sflush_r+0xf6>
 8008032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800803a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008042:	4407      	add	r7, r0
 8008044:	1a36      	subs	r6, r6, r0
 8008046:	e7e9      	b.n	800801c <__sflush_r+0xd0>
 8008048:	20400001 	.word	0x20400001

0800804c <_fflush_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	690b      	ldr	r3, [r1, #16]
 8008050:	4605      	mov	r5, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b913      	cbnz	r3, 800805c <_fflush_r+0x10>
 8008056:	2500      	movs	r5, #0
 8008058:	4628      	mov	r0, r5
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	b118      	cbz	r0, 8008066 <_fflush_r+0x1a>
 800805e:	6a03      	ldr	r3, [r0, #32]
 8008060:	b90b      	cbnz	r3, 8008066 <_fflush_r+0x1a>
 8008062:	f7ff fb27 	bl	80076b4 <__sinit>
 8008066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f3      	beq.n	8008056 <_fflush_r+0xa>
 800806e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008070:	07d0      	lsls	r0, r2, #31
 8008072:	d404      	bmi.n	800807e <_fflush_r+0x32>
 8008074:	0599      	lsls	r1, r3, #22
 8008076:	d402      	bmi.n	800807e <_fflush_r+0x32>
 8008078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800807a:	f7ff fbf4 	bl	8007866 <__retarget_lock_acquire_recursive>
 800807e:	4628      	mov	r0, r5
 8008080:	4621      	mov	r1, r4
 8008082:	f7ff ff63 	bl	8007f4c <__sflush_r>
 8008086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008088:	4605      	mov	r5, r0
 800808a:	07da      	lsls	r2, r3, #31
 800808c:	d4e4      	bmi.n	8008058 <_fflush_r+0xc>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d4e1      	bmi.n	8008058 <_fflush_r+0xc>
 8008094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008096:	f7ff fbe7 	bl	8007868 <__retarget_lock_release_recursive>
 800809a:	e7dd      	b.n	8008058 <_fflush_r+0xc>

0800809c <__malloc_lock>:
 800809c:	4801      	ldr	r0, [pc, #4]	@ (80080a4 <__malloc_lock+0x8>)
 800809e:	f7ff bbe2 	b.w	8007866 <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	20000398 	.word	0x20000398

080080a8 <__malloc_unlock>:
 80080a8:	4801      	ldr	r0, [pc, #4]	@ (80080b0 <__malloc_unlock+0x8>)
 80080aa:	f7ff bbdd 	b.w	8007868 <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	20000398 	.word	0x20000398

080080b4 <__sread>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	f000 f956 	bl	800836c <_read_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	bfab      	itete	ge
 80080c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080c6:	89a3      	ldrhlt	r3, [r4, #12]
 80080c8:	181b      	addge	r3, r3, r0
 80080ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080ce:	bfac      	ite	ge
 80080d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080d2:	81a3      	strhlt	r3, [r4, #12]
 80080d4:	bd10      	pop	{r4, pc}

080080d6 <__swrite>:
 80080d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080da:	461f      	mov	r7, r3
 80080dc:	898b      	ldrh	r3, [r1, #12]
 80080de:	4605      	mov	r5, r0
 80080e0:	05db      	lsls	r3, r3, #23
 80080e2:	460c      	mov	r4, r1
 80080e4:	4616      	mov	r6, r2
 80080e6:	d505      	bpl.n	80080f4 <__swrite+0x1e>
 80080e8:	2302      	movs	r3, #2
 80080ea:	2200      	movs	r2, #0
 80080ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f0:	f000 f92a 	bl	8008348 <_lseek_r>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	4632      	mov	r2, r6
 80080f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	4628      	mov	r0, r5
 8008100:	463b      	mov	r3, r7
 8008102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	f000 b951 	b.w	80083b0 <_write_r>

0800810e <__sseek>:
 800810e:	b510      	push	{r4, lr}
 8008110:	460c      	mov	r4, r1
 8008112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008116:	f000 f917 	bl	8008348 <_lseek_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	bf15      	itete	ne
 8008120:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800812a:	81a3      	strheq	r3, [r4, #12]
 800812c:	bf18      	it	ne
 800812e:	81a3      	strhne	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__sclose>:
 8008132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008136:	f000 b94d 	b.w	80083d4 <_close_r>

0800813a <__swbuf_r>:
 800813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813c:	460e      	mov	r6, r1
 800813e:	4614      	mov	r4, r2
 8008140:	4605      	mov	r5, r0
 8008142:	b118      	cbz	r0, 800814c <__swbuf_r+0x12>
 8008144:	6a03      	ldr	r3, [r0, #32]
 8008146:	b90b      	cbnz	r3, 800814c <__swbuf_r+0x12>
 8008148:	f7ff fab4 	bl	80076b4 <__sinit>
 800814c:	69a3      	ldr	r3, [r4, #24]
 800814e:	60a3      	str	r3, [r4, #8]
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	071a      	lsls	r2, r3, #28
 8008154:	d501      	bpl.n	800815a <__swbuf_r+0x20>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	b943      	cbnz	r3, 800816c <__swbuf_r+0x32>
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f000 f82b 	bl	80081b8 <__swsetup_r>
 8008162:	b118      	cbz	r0, 800816c <__swbuf_r+0x32>
 8008164:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008168:	4638      	mov	r0, r7
 800816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	b2f6      	uxtb	r6, r6
 8008172:	1a98      	subs	r0, r3, r2
 8008174:	6963      	ldr	r3, [r4, #20]
 8008176:	4637      	mov	r7, r6
 8008178:	4283      	cmp	r3, r0
 800817a:	dc05      	bgt.n	8008188 <__swbuf_r+0x4e>
 800817c:	4621      	mov	r1, r4
 800817e:	4628      	mov	r0, r5
 8008180:	f7ff ff64 	bl	800804c <_fflush_r>
 8008184:	2800      	cmp	r0, #0
 8008186:	d1ed      	bne.n	8008164 <__swbuf_r+0x2a>
 8008188:	68a3      	ldr	r3, [r4, #8]
 800818a:	3b01      	subs	r3, #1
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	6022      	str	r2, [r4, #0]
 8008194:	701e      	strb	r6, [r3, #0]
 8008196:	6962      	ldr	r2, [r4, #20]
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	429a      	cmp	r2, r3
 800819c:	d004      	beq.n	80081a8 <__swbuf_r+0x6e>
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	07db      	lsls	r3, r3, #31
 80081a2:	d5e1      	bpl.n	8008168 <__swbuf_r+0x2e>
 80081a4:	2e0a      	cmp	r6, #10
 80081a6:	d1df      	bne.n	8008168 <__swbuf_r+0x2e>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff ff4e 	bl	800804c <_fflush_r>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d0d9      	beq.n	8008168 <__swbuf_r+0x2e>
 80081b4:	e7d6      	b.n	8008164 <__swbuf_r+0x2a>
	...

080081b8 <__swsetup_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4b29      	ldr	r3, [pc, #164]	@ (8008260 <__swsetup_r+0xa8>)
 80081bc:	4605      	mov	r5, r0
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	460c      	mov	r4, r1
 80081c2:	b118      	cbz	r0, 80081cc <__swsetup_r+0x14>
 80081c4:	6a03      	ldr	r3, [r0, #32]
 80081c6:	b90b      	cbnz	r3, 80081cc <__swsetup_r+0x14>
 80081c8:	f7ff fa74 	bl	80076b4 <__sinit>
 80081cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d0:	0719      	lsls	r1, r3, #28
 80081d2:	d422      	bmi.n	800821a <__swsetup_r+0x62>
 80081d4:	06da      	lsls	r2, r3, #27
 80081d6:	d407      	bmi.n	80081e8 <__swsetup_r+0x30>
 80081d8:	2209      	movs	r2, #9
 80081da:	602a      	str	r2, [r5, #0]
 80081dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e033      	b.n	8008250 <__swsetup_r+0x98>
 80081e8:	0758      	lsls	r0, r3, #29
 80081ea:	d512      	bpl.n	8008212 <__swsetup_r+0x5a>
 80081ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ee:	b141      	cbz	r1, 8008202 <__swsetup_r+0x4a>
 80081f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081f4:	4299      	cmp	r1, r3
 80081f6:	d002      	beq.n	80081fe <__swsetup_r+0x46>
 80081f8:	4628      	mov	r0, r5
 80081fa:	f000 f91b 	bl	8008434 <_free_r>
 80081fe:	2300      	movs	r3, #0
 8008200:	6363      	str	r3, [r4, #52]	@ 0x34
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	2300      	movs	r3, #0
 800820c:	6063      	str	r3, [r4, #4]
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f043 0308 	orr.w	r3, r3, #8
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	b94b      	cbnz	r3, 8008232 <__swsetup_r+0x7a>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008228:	d003      	beq.n	8008232 <__swsetup_r+0x7a>
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f000 f83e 	bl	80082ae <__smakebuf_r>
 8008232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008236:	f013 0201 	ands.w	r2, r3, #1
 800823a:	d00a      	beq.n	8008252 <__swsetup_r+0x9a>
 800823c:	2200      	movs	r2, #0
 800823e:	60a2      	str	r2, [r4, #8]
 8008240:	6962      	ldr	r2, [r4, #20]
 8008242:	4252      	negs	r2, r2
 8008244:	61a2      	str	r2, [r4, #24]
 8008246:	6922      	ldr	r2, [r4, #16]
 8008248:	b942      	cbnz	r2, 800825c <__swsetup_r+0xa4>
 800824a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800824e:	d1c5      	bne.n	80081dc <__swsetup_r+0x24>
 8008250:	bd38      	pop	{r3, r4, r5, pc}
 8008252:	0799      	lsls	r1, r3, #30
 8008254:	bf58      	it	pl
 8008256:	6962      	ldrpl	r2, [r4, #20]
 8008258:	60a2      	str	r2, [r4, #8]
 800825a:	e7f4      	b.n	8008246 <__swsetup_r+0x8e>
 800825c:	2000      	movs	r0, #0
 800825e:	e7f7      	b.n	8008250 <__swsetup_r+0x98>
 8008260:	2000001c 	.word	0x2000001c

08008264 <__swhatbuf_r>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	460c      	mov	r4, r1
 8008268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826c:	4615      	mov	r5, r2
 800826e:	2900      	cmp	r1, #0
 8008270:	461e      	mov	r6, r3
 8008272:	b096      	sub	sp, #88	@ 0x58
 8008274:	da0c      	bge.n	8008290 <__swhatbuf_r+0x2c>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	2100      	movs	r1, #0
 800827a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800827e:	bf14      	ite	ne
 8008280:	2340      	movne	r3, #64	@ 0x40
 8008282:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008286:	2000      	movs	r0, #0
 8008288:	6031      	str	r1, [r6, #0]
 800828a:	602b      	str	r3, [r5, #0]
 800828c:	b016      	add	sp, #88	@ 0x58
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	466a      	mov	r2, sp
 8008292:	f000 f8af 	bl	80083f4 <_fstat_r>
 8008296:	2800      	cmp	r0, #0
 8008298:	dbed      	blt.n	8008276 <__swhatbuf_r+0x12>
 800829a:	9901      	ldr	r1, [sp, #4]
 800829c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082a4:	4259      	negs	r1, r3
 80082a6:	4159      	adcs	r1, r3
 80082a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ac:	e7eb      	b.n	8008286 <__swhatbuf_r+0x22>

080082ae <__smakebuf_r>:
 80082ae:	898b      	ldrh	r3, [r1, #12]
 80082b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082b2:	079d      	lsls	r5, r3, #30
 80082b4:	4606      	mov	r6, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	d507      	bpl.n	80082ca <__smakebuf_r+0x1c>
 80082ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	2301      	movs	r3, #1
 80082c4:	6163      	str	r3, [r4, #20]
 80082c6:	b003      	add	sp, #12
 80082c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ca:	466a      	mov	r2, sp
 80082cc:	ab01      	add	r3, sp, #4
 80082ce:	f7ff ffc9 	bl	8008264 <__swhatbuf_r>
 80082d2:	9f00      	ldr	r7, [sp, #0]
 80082d4:	4605      	mov	r5, r0
 80082d6:	4639      	mov	r1, r7
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff fc27 	bl	8007b2c <_malloc_r>
 80082de:	b948      	cbnz	r0, 80082f4 <__smakebuf_r+0x46>
 80082e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e4:	059a      	lsls	r2, r3, #22
 80082e6:	d4ee      	bmi.n	80082c6 <__smakebuf_r+0x18>
 80082e8:	f023 0303 	bic.w	r3, r3, #3
 80082ec:	f043 0302 	orr.w	r3, r3, #2
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	e7e2      	b.n	80082ba <__smakebuf_r+0xc>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fe:	81a3      	strh	r3, [r4, #12]
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	6020      	str	r0, [r4, #0]
 8008304:	b15b      	cbz	r3, 800831e <__smakebuf_r+0x70>
 8008306:	4630      	mov	r0, r6
 8008308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800830c:	f000 f80c 	bl	8008328 <_isatty_r>
 8008310:	b128      	cbz	r0, 800831e <__smakebuf_r+0x70>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f023 0303 	bic.w	r3, r3, #3
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	431d      	orrs	r5, r3
 8008322:	81a5      	strh	r5, [r4, #12]
 8008324:	e7cf      	b.n	80082c6 <__smakebuf_r+0x18>
	...

08008328 <_isatty_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	2300      	movs	r3, #0
 800832c:	4d05      	ldr	r5, [pc, #20]	@ (8008344 <_isatty_r+0x1c>)
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	f7f9 fa5d 	bl	80017f2 <_isatty>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_isatty_r+0x1a>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_isatty_r+0x1a>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	200003a4 	.word	0x200003a4

08008348 <_lseek_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	2200      	movs	r2, #0
 8008352:	4d05      	ldr	r5, [pc, #20]	@ (8008368 <_lseek_r+0x20>)
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7f9 fa55 	bl	8001806 <_lseek>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_lseek_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_lseek_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200003a4 	.word	0x200003a4

0800836c <_read_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	4611      	mov	r1, r2
 8008374:	2200      	movs	r2, #0
 8008376:	4d05      	ldr	r5, [pc, #20]	@ (800838c <_read_r+0x20>)
 8008378:	602a      	str	r2, [r5, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	f7f9 fa02 	bl	8001784 <_read>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_read_r+0x1e>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_read_r+0x1e>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	200003a4 	.word	0x200003a4

08008390 <_sbrk_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	2300      	movs	r3, #0
 8008394:	4d05      	ldr	r5, [pc, #20]	@ (80083ac <_sbrk_r+0x1c>)
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7f9 fa40 	bl	8001820 <_sbrk>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_sbrk_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_sbrk_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	200003a4 	.word	0x200003a4

080083b0 <_write_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4604      	mov	r4, r0
 80083b4:	4608      	mov	r0, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	4d05      	ldr	r5, [pc, #20]	@ (80083d0 <_write_r+0x20>)
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7f8 ffd2 	bl	8001368 <_write>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_write_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_write_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	200003a4 	.word	0x200003a4

080083d4 <_close_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	2300      	movs	r3, #0
 80083d8:	4d05      	ldr	r5, [pc, #20]	@ (80083f0 <_close_r+0x1c>)
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7f9 f9ed 	bl	80017be <_close>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_close_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_close_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	200003a4 	.word	0x200003a4

080083f4 <_fstat_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	2300      	movs	r3, #0
 80083f8:	4d06      	ldr	r5, [pc, #24]	@ (8008414 <_fstat_r+0x20>)
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	f7f9 f9e7 	bl	80017d4 <_fstat>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d102      	bne.n	8008410 <_fstat_r+0x1c>
 800840a:	682b      	ldr	r3, [r5, #0]
 800840c:	b103      	cbz	r3, 8008410 <_fstat_r+0x1c>
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	bf00      	nop
 8008414:	200003a4 	.word	0x200003a4

08008418 <memchr>:
 8008418:	4603      	mov	r3, r0
 800841a:	b510      	push	{r4, lr}
 800841c:	b2c9      	uxtb	r1, r1
 800841e:	4402      	add	r2, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	4618      	mov	r0, r3
 8008424:	d101      	bne.n	800842a <memchr+0x12>
 8008426:	2000      	movs	r0, #0
 8008428:	e003      	b.n	8008432 <memchr+0x1a>
 800842a:	7804      	ldrb	r4, [r0, #0]
 800842c:	3301      	adds	r3, #1
 800842e:	428c      	cmp	r4, r1
 8008430:	d1f6      	bne.n	8008420 <memchr+0x8>
 8008432:	bd10      	pop	{r4, pc}

08008434 <_free_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4605      	mov	r5, r0
 8008438:	2900      	cmp	r1, #0
 800843a:	d040      	beq.n	80084be <_free_r+0x8a>
 800843c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008440:	1f0c      	subs	r4, r1, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	bfb8      	it	lt
 8008446:	18e4      	addlt	r4, r4, r3
 8008448:	f7ff fe28 	bl	800809c <__malloc_lock>
 800844c:	4a1c      	ldr	r2, [pc, #112]	@ (80084c0 <_free_r+0x8c>)
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	b933      	cbnz	r3, 8008460 <_free_r+0x2c>
 8008452:	6063      	str	r3, [r4, #4]
 8008454:	6014      	str	r4, [r2, #0]
 8008456:	4628      	mov	r0, r5
 8008458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800845c:	f7ff be24 	b.w	80080a8 <__malloc_unlock>
 8008460:	42a3      	cmp	r3, r4
 8008462:	d908      	bls.n	8008476 <_free_r+0x42>
 8008464:	6820      	ldr	r0, [r4, #0]
 8008466:	1821      	adds	r1, r4, r0
 8008468:	428b      	cmp	r3, r1
 800846a:	bf01      	itttt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	1809      	addeq	r1, r1, r0
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	e7ed      	b.n	8008452 <_free_r+0x1e>
 8008476:	461a      	mov	r2, r3
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	b10b      	cbz	r3, 8008480 <_free_r+0x4c>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d9fa      	bls.n	8008476 <_free_r+0x42>
 8008480:	6811      	ldr	r1, [r2, #0]
 8008482:	1850      	adds	r0, r2, r1
 8008484:	42a0      	cmp	r0, r4
 8008486:	d10b      	bne.n	80084a0 <_free_r+0x6c>
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	4401      	add	r1, r0
 800848c:	1850      	adds	r0, r2, r1
 800848e:	4283      	cmp	r3, r0
 8008490:	6011      	str	r1, [r2, #0]
 8008492:	d1e0      	bne.n	8008456 <_free_r+0x22>
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4408      	add	r0, r1
 800849a:	6010      	str	r0, [r2, #0]
 800849c:	6053      	str	r3, [r2, #4]
 800849e:	e7da      	b.n	8008456 <_free_r+0x22>
 80084a0:	d902      	bls.n	80084a8 <_free_r+0x74>
 80084a2:	230c      	movs	r3, #12
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	e7d6      	b.n	8008456 <_free_r+0x22>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	1821      	adds	r1, r4, r0
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf01      	itttt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	1809      	addeq	r1, r1, r0
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	6054      	str	r4, [r2, #4]
 80084bc:	e7cb      	b.n	8008456 <_free_r+0x22>
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	200003a0 	.word	0x200003a0

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
